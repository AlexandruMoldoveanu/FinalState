F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\diag_message_handler.cpp:1:0: information: Include file: <doiplib/diag_message_ack.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/diag_message_ack.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\diag_message_handler.h:4:0: information: Include file: <doiplib/message_handler.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/message_handler.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\diag_message_handler.h:5:0: information: Include file: <doiplib/diag_message.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/diag_message.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\read_data_by_identifier.h:4:0: information: Include file: <json/json.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <json/json.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\routable_uds_service.h:4:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\routable_uds_service.h:5:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.h:4:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.h:5:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\error_code.h:4:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\error_domain.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:4:0: information: Include file: <type_traits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <type_traits>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:5:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:6:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.h:5:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.h:6:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\cancellation_handler.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\curl_wrapper.h:4:0: information: Include file: <curl/curl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <curl/curl.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\curl_wrapper.h:5:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\memory_cache.h:4:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\memory_cache.h:5:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:190:21: error: Found an exit path from function with non-void return type that has missing return statement [missingReturn]
                    mValuePtr;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\error_domain.h:31:14: warning: inconclusive: Class 'ErrorDomain' which has virtual members does not have a virtual destructor. [virtualDestructor]
            ~ErrorDomain() noexcept = default;
             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:670:28: performance: inconclusive: Technically the member function 'ara::core::Result::Value' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            constexpr void Value() const noexcept
                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:707:18: performance: inconclusive: Technically the member function 'ara::core::Result::ValueOr' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            void ValueOr(U &&defaultValue) const noexcept
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:752:18: performance: inconclusive: Technically the member function 'ara::core::Result::ValueOrThrow' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            void ValueOrThrow() const noexcept(false)
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\routable_uds_service.h:64:22: performance: inconclusive: Technically the member function 'ara::diag::routing::RoutableUdsService::TryExtractValue' can be static (but you may consider moving to unnamed namespace). [functionStatic]
                bool TryExtractValue(MetaInfo &metaInfo, std::string key, T &value) const
                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.h:36:13: style: Class 'MetaInfo' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            MetaInfo(Context context);
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\cancellation_handler.h:27:13: style: Class 'CancellationHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            CancellationHandler(bool isCanceled) noexcept;
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < InstanceSpecifier , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < InstanceSpecifier , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < std :: string >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < std :: string >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:190:21: warning: Unused variable value 'mValuePtr' [constStatement]
                    mValuePtr;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.h:42:48: performance: Function parameter 'other' should be passed by const reference. [passedByValue]
            inline bool operator==(std::string other) const noexcept
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.h:52:48: performance: Function parameter 'other' should be passed by const reference. [passedByValue]
            inline bool operator!=(std::string other) const noexcept
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.h:77:44: performance: Function parameter 'lhs' should be passed by const reference. [passedByValue]
        inline bool operator==(std::string lhs, const InstanceSpecifier &rhs) noexcept
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.h:82:44: performance: Function parameter 'lhs' should be passed by const reference. [passedByValue]
        inline bool operator!=(std::string lhs, const InstanceSpecifier &rhs) noexcept
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\routable_uds_service.h:64:70: performance: Function parameter 'key' should be passed by const reference. [passedByValue]
                bool TryExtractValue(MetaInfo &metaInfo, std::string key, T &value) const
                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.cpp:2:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.cpp:3:0: information: Include file: <doiplib/diag_message.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/diag_message.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.cpp:4:0: information: Include file: <doiplib/diag_message_ack.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/diag_message_ack.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.cpp:5:0: information: Include file: <doiplib/vehicle_id_request.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/vehicle_id_request.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.cpp:6:0: information: Include file: <doiplib/vehicle_id_response.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/vehicle_id_response.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.h:5:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_client.h:6:0: information: Include file: <asyncbsdsocket/tcp_client.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/tcp_client.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\concurrent_queue.h:4:0: information: Include file: <mutex> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <mutex>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\concurrent_queue.h:5:0: information: Include file: <queue> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <queue>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\concurrent_queue.h:6:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < uint16_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < uint16_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_server.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_server.cpp:2:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_server.h:4:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_server.h:5:0: information: Include file: <asyncbsdsocket/tcp_listener.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/tcp_listener.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\doip_server.h:6:0: information: Include file: <doiplib/doip_controller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/doip_controller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\vehicle_id_request_handler.h:4:0: information: Include file: <doiplib/message_handler.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/message_handler.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\vehicle_id_request_handler.h:5:0: information: Include file: <doiplib/vehicle_id_request.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/vehicle_id_request.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\vehicle_id_request_handler.h:6:0: information: Include file: <doiplib/vehicle_id_response.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/vehicle_id_response.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\obd_to_doip_converter.h:4:0: information: Include file: <obdemulator/obd_service.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <obdemulator/obd_service.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\obd_to_doip_converter.cpp:14:25: performance: Function parameter 'ipAddress' should be passed by const reference. [passedByValue]
            std::string ipAddress,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\extended_vehicle.cpp:1:0: information: Include file: <json/json.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <json/json.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\sd_network_layer.h:4:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\sd_network_layer.h:5:0: information: Include file: <asyncbsdsocket/udp_client.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/udp_client.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\network_layer.h:4:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\network_layer.h:5:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\network_layer.h:6:0: information: Include file: <type_traits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <type_traits>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.h:4:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\someip_message.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\someip_message.h:5:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\someip_message.h:6:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\someip_message.h:7:0: information: Include file: <limits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\payload_helper.h:4:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\payload_helper.h:5:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.h:5:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.h:6:0: information: Include file: <memory> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <memory>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.h:7:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\option.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\option.h:5:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:5:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:6:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:7:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.h:4:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.h:5:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:4:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:5:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:6:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:7:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:8:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.h:4:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.h:4:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.h:5:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\common.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\argument.h:4:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\argument.h:5:0: information: Include file: <type_traits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <type_traits>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.h:4:0: information: Include file: <ctime> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctime>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\console_log_sink.h:4:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\file_log_sink.h:4:0: information: Include file: <fstream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fstream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:5:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:6:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:7:0: information: Include file: <mutex> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <mutex>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:8:0: information: Include file: <condition_variable> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <condition_variable>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\worker_thread.h:4:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\worker_thread.h:5:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\worker_thread.h:6:0: information: Include file: <random> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <random>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\atomic_optional.h:4:0: information: Include file: <type_traits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <type_traits>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\atomic_optional.h:5:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\atomic_optional.h:6:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\atomic_optional.h:7:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervised_entity.h:4:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervised_entity.h:5:0: information: Include file: <type_traits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <type_traits>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\checkpoint_communicator.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\checkpoint_communicator.h:5:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:4:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:5:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:6:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\service_entry.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\ipv4_endpoint_option.h:4:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\ipv4_endpoint_option.h:5:0: information: Include file: <memory> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <memory>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\machine_state.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\initial_wait_state.h:4:0: information: Include file: <random> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <random>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\initial_wait_state.h:5:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\initial_wait_state.h:6:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:4:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\repetition_state.h:4:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\repetition_state.h:5:0: information: Include file: <cmath> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cmath>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\repetition_state.h:6:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_agent.h:4:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\finite_state_machine.h:4:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\finite_state_machine.h:5:0: information: Include file: <initializer_list> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <initializer_list>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.h:4:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.h:5:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.h:4:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.h:5:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.h:6:0: information: Include file: <initializer_list> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <initializer_list>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_node_iterator.h:4:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_node.h:4:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:27:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:31:0: information: Include file: <exception> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <exception>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:36:0: information: Include file: <iterator> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <iterator>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:37:0: information: Include file: <iosfwd> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <iosfwd>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:38:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_node_range.h:6:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\extended_vehicle.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\extended_vehicle.cpp:12:22: warning: Member variable 'ExtendedVehicle::mDoipServer' is not initialized in the constructor. [uninitMemberVar]
    ExtendedVehicle::ExtendedVehicle(
                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:26:33: style: inconclusive: Member variable 'TimerSetState < helper :: SdServerState >::mStoppedState' is in the wrong place in the initializer list. [initializerList]
                        const T mStoppedState;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:89:69: note: Member variable 'TimerSetState < helper :: SdServerState >::mStoppedState' is in the wrong place in the initializer list.
                                                                    mStoppedState{stoppedState},
                                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:26:33: note: Member variable 'TimerSetState < helper :: SdServerState >::mStoppedState' is in the wrong place in the initializer list.
                        const T mStoppedState;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:28:30: style: inconclusive: Member variable 'TimerSetState < helper :: SdServerState >::mStopped' is in the wrong place in the initializer list. [initializerList]
                        bool mStopped;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:91:69: note: Member variable 'TimerSetState < helper :: SdServerState >::mStopped' is in the wrong place in the initializer list.
                                                                    mStopped{false},
                                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:28:30: note: Member variable 'TimerSetState < helper :: SdServerState >::mStopped' is in the wrong place in the initializer list.
                        bool mStopped;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:49:30: style: inconclusive: Technically the member function 'TimerSetState < helper :: SdServerState >::WaitFor' can be const. [functionConst]
                        bool WaitFor(std::chrono::milliseconds duration)
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:35:17: style: Struct 'Ipv4Address' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
                Ipv4Address(std::string ipAddress);
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\notready_state.h:29:25: style: Class 'NotReadyState' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
                        NotReadyState(std::function<void()> onServiceStopped);
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:338:3: style: Class 'xml_writer_file' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_writer_file(void* file);
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:352:3: style: Class 'xml_writer_stream' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_writer_stream(std::basic_ostream<char, std::char_traits<char> >& stream);
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:353:3: style: Class 'xml_writer_stream' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_writer_stream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream);
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:852:3: style: Class 'xml_node_iterator' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_node_iterator(const xml_node& node);
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1146:3: style: Class 'xpath_variable' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xpath_variable(xpath_value_type type);
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1331:3: style: Class 'xpath_node' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xpath_node(const xml_node& node);
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\atomic_optional.h:32:27: style: Class 'AtomicOptional < uint64_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
                constexpr AtomicOptional(T value) noexcept : mValue{value},
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < std :: reference_wrapper < Conversation > , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < std :: reference_wrapper < Conversation > , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < ActivityStatusType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < ActivityStatusType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < ConversationIdentifierType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < ConversationIdentifierType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < SessionControlType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < SessionControlType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < std :: string , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < std :: string , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < SecurityLevelType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < SecurityLevelType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < ActivationReturnType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < ActivationReturnType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < std :: chrono :: time_point < std :: chrono :: steady_clock > , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < std :: chrono :: time_point < std :: chrono :: steady_clock > , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:63:48: performance: Function parameter 'address1' should be passed by const reference. [passedByValue]
            inline bool operator==(Ipv4Address address1, Ipv4Address address2)
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:63:70: performance: Function parameter 'address2' should be passed by const reference. [passedByValue]
            inline bool operator==(Ipv4Address address1, Ipv4Address address2)
                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:78:48: performance: Function parameter 'address1' should be passed by const reference. [passedByValue]
            inline bool operator!=(Ipv4Address address1, Ipv4Address address2)
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.h:78:70: performance: Function parameter 'address2' should be passed by const reference. [passedByValue]
            inline bool operator!=(Ipv4Address address1, Ipv4Address address2)
                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.h:49:29: performance: Range variable 'child' should be declared as const reference. [iterateByValue]
            for (const auto child : children)
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.h:73:29: performance: Range variable 'child' should be declared as const reference. [iterateByValue]
            for (const auto child : children)
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.h:75:25: performance: Function parameter 'shortNameFilter' should be passed by const reference. [passedByValue]
            std::string shortNameFilter,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\extended_vehicle.cpp:160:21: performance: Function parameter 'apiKey' should be passed by const reference. [passedByValue]
        std::string apiKey, std::string bearerToken, std::string &vin)
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\extended_vehicle.cpp:160:41: performance: Function parameter 'bearerToken' should be passed by const reference. [passedByValue]
        std::string apiKey, std::string bearerToken, std::string &vin)
                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.h:51:23: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                _root = _root.child(child.c_str());
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.h:75:23: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                _root = _root.child(child.c_str());
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:1:0: information: Include file: <termios.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <termios.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:2:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:3:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.h:17:18: performance: inconclusive: Technically the member function 'application::helper::ArgumentConfiguration::trySetEchoMode' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            bool trySetEchoMode(bool enabled);
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:53:37: note: Technically the member function 'application::helper::ArgumentConfiguration::trySetEchoMode' can be static (but you may consider moving to unnamed namespace).
        bool ArgumentConfiguration::trySetEchoMode(bool enabled)
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.h:17:18: note: Technically the member function 'application::helper::ArgumentConfiguration::trySetEchoMode' can be static (but you may consider moving to unnamed namespace).
            bool trySetEchoMode(bool enabled);
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:20:25: performance: Function parameter 'defaultConfigFile' should be passed by const reference. [passedByValue]
            std::string defaultConfigFile,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:21:25: performance: Function parameter 'extendedVehicleConfigFile' should be passed by const reference. [passedByValue]
            std::string extendedVehicleConfigFile,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:22:25: performance: Function parameter 'diagnosticManagerConfigFile' should be passed by const reference. [passedByValue]
            std::string diagnosticManagerConfigFile,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:23:25: performance: Function parameter 'healthMonitoringConfigFile' should be passed by const reference. [passedByValue]
            std::string healthMonitoringConfigFile)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:83:25: performance: Function parameter 'message' should be passed by const reference. [passedByValue]
            std::string message, std::string argumentKey)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:110:68: performance: Function parameter 'message' should be passed by const reference. [passedByValue]
        bool ArgumentConfiguration::TryAskingVccApiKey(std::string message)
                                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:115:68: performance: Function parameter 'message' should be passed by const reference. [passedByValue]
        bool ArgumentConfiguration::TryAskingBearToken(std::string message)
                                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\argument_configuration.cpp:19:19: style: Parameter 'argv' can be declared as const array [constParameter]
            char *argv[],
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\curl_wrapper.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\curl_wrapper.cpp:8:46: performance: Function parameter 'vccApiKey' should be passed by const reference. [passedByValue]
        CurlWrapper::CurlWrapper(std::string vccApiKey, std::string bearerToken) : mCurlHandler{curl_easy_init()},
                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\curl_wrapper.cpp:8:69: performance: Function parameter 'bearerToken' should be passed by const reference. [passedByValue]
        CurlWrapper::CurlWrapper(std::string vccApiKey, std::string bearerToken) : mCurlHandler{curl_easy_init()},
                                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\curl_wrapper.cpp:55:50: performance: Function parameter 'url' should be passed by const reference. [passedByValue]
        bool CurlWrapper::TryExecute(std::string url, std::string *response)
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\fifo_checkpoint_communicator.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\fifo_checkpoint_communicator.cpp:2:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\fifo_checkpoint_communicator.h:4:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\fifo_checkpoint_communicator.h:5:0: information: Include file: <asyncbsdsocket/fifo_sender.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/fifo_sender.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\fifo_checkpoint_communicator.h:6:0: information: Include file: <asyncbsdsocket/fifo_receiver.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/fifo_receiver.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\e2e\profile11.h:4:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\e2e\profile11.h:5:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\e2e\profile.h:4:0: information: Include file: <cstdint> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstdint>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\e2e\profile.h:5:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < FunctionGroup , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < FunctionGroup , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < InstanceSpecifier >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < InstanceSpecifier >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < FunctionGroup >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < FunctionGroup >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.cpp:9:25: performance: Function parameter 'networkEndpoint' should be passed by const reference. [passedByValue]
            std::string networkEndpoint,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.cpp:10:25: performance: Function parameter 'applicationEndpoint' should be passed by const reference. [passedByValue]
            std::string applicationEndpoint,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.cpp:64:25: performance: Function parameter 'networkEndpoint' should be passed by const reference. [passedByValue]
            std::string networkEndpoint,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\network_configuration.cpp:65:25: performance: Function parameter 'applicationEndpoint' should be passed by const reference. [passedByValue]
            std::string applicationEndpoint,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\read_data_by_identifier.cpp:3:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\read_data_by_identifier.h:31:31: style: inconclusive: Member variable 'ReadDataByIdentifier::cResourcesUrl' is in the wrong place in the initializer list. [initializerList]
            const std::string cResourcesUrl;
                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\read_data_by_identifier.cpp:23:41: note: Member variable 'ReadDataByIdentifier::cResourcesUrl' is in the wrong place in the initializer list.
                                        cResourcesUrl{resourcesUrl},
                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\read_data_by_identifier.h:31:31: note: Member variable 'ReadDataByIdentifier::cResourcesUrl' is in the wrong place in the initializer list.
            const std::string cResourcesUrl;
                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\read_data_by_identifier.cpp:56:25: performance: Function parameter 'resourceKey' should be passed by const reference. [passedByValue]
            std::string resourceKey, Json::Value &jsonValue)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\rpc_configuration.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\rpc_configuration.cpp:9:25: performance: Function parameter 'networkEndpoint' should be passed by const reference. [passedByValue]
            std::string networkEndpoint,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\helper\rpc_configuration.cpp:10:25: performance: Function parameter 'applicationEndpoint' should be passed by const reference. [passedByValue]
            std::string applicationEndpoint,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\diagnostic_manager.h:4:0: information: Include file: <obdemulator/serial_communication.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <obdemulator/serial_communication.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\diagnostic_manager.h:5:0: information: Include file: <obdemulator/obd_emulator.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <obdemulator/obd_emulator.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.h:4:0: information: Include file: <mutex> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <mutex>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.h:5:0: information: Include file: <condition_variable> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <condition_variable>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.h:6:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\monitor.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\counter_based_debouncer.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\debouncer.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:5:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:6:0: information: Include file: <condition_variable> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <condition_variable>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:7:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.h:5:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.h:6:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\diagnostic_manager.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\diagnostic_manager.cpp:15:28: warning: Member variable 'DiagnosticManager::mEventSpecifier' is not initialized in the constructor. [uninitMemberVar]
        DiagnosticManager::DiagnosticManager(AsyncBsdSocketLib::Poller *poller) : ara::exec::helper::ModelledProcess(cAppId, poller),
                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\diagnostic_manager.cpp:15:28: warning: Member variable 'DiagnosticManager::mMonitorSpecifier' is not initialized in the constructor. [uninitMemberVar]
        DiagnosticManager::DiagnosticManager(AsyncBsdSocketLib::Poller *poller) : ara::exec::helper::ModelledProcess(cAppId, poller),
                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:26:33: style: inconclusive: Member variable 'TimerSetState < helper :: SdClientState >::mStoppedState' is in the wrong place in the initializer list. [initializerList]
                        const T mStoppedState;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:89:69: note: Member variable 'TimerSetState < helper :: SdClientState >::mStoppedState' is in the wrong place in the initializer list.
                                                                    mStoppedState{stoppedState},
                                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:26:33: note: Member variable 'TimerSetState < helper :: SdClientState >::mStoppedState' is in the wrong place in the initializer list.
                        const T mStoppedState;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:28:30: style: inconclusive: Member variable 'TimerSetState < helper :: SdClientState >::mStopped' is in the wrong place in the initializer list. [initializerList]
                        bool mStopped;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:91:69: note: Member variable 'TimerSetState < helper :: SdClientState >::mStopped' is in the wrong place in the initializer list.
                                                                    mStopped{false},
                                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:28:30: note: Member variable 'TimerSetState < helper :: SdClientState >::mStopped' is in the wrong place in the initializer list.
                        bool mStopped;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\client_service_state.h:28:25: style: Class 'ClientServiceState' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
                        ClientServiceState(helper::TtlTimer *timer) : Timer{timer}
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < EventStatusByte , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < EventStatusByte , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < bool , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < bool , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < uint32_t , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < uint32_t , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < DebouncingState , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < DebouncingState , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < int8_t , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < int8_t , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\client_service_state.h:35:34: style: The destructor '~ClientServiceState' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
                        virtual ~ClientServiceState() noexcept = default;
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\machine_state.h:76:26: note: Virtual destructor in base class
                virtual ~MachineState() = default;
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\client_service_state.h:35:34: note: Destructor in derived class
                        virtual ~ClientServiceState() noexcept = default;
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\diagnostic_manager.cpp:47:25: error: Uninitialized struct member: _networkConfiguration.portNumber [uninitStructMember]
                        _networkConfiguration.portNumber);
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\diagnostic_manager.cpp:128:70: error: Uninitialized variable: _port [legacyUninitvar]
                    new doip::ObdToDoipConverter(Poller, _ipAddress, _port);
                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\socket_rpc_server.h:4:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_server.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_server.h:5:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_server.h:6:0: information: Include file: <set> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <set>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_server.h:7:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_server.h:8:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_server.h:4:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_server.h:5:0: information: Include file: <mutex> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <mutex>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_server.h:6:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_client.h:4:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_client.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_client.h:5:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_client.h:6:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_client.h:7:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\execution_management.h:4:0: information: Include file: <set> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <set>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.h:4:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.h:5:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.h:6:0: information: Include file: <mutex> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <mutex>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.h:7:0: information: Include file: <set> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <set>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\sm\trigger.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\socket_rpc_client.h:4:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\socket_rpc_client.h:5:0: information: Include file: <asyncbsdsocket/tcp_client.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/tcp_client.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_client.h:4:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group_state.h:4:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\platform_health_management.h:4:0: information: Include file: <set> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <set>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\alive_supervision.h:4:0: information: Include file: <atomic> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <atomic>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\alive_supervision.h:5:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\alive_supervision.h:6:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\elementary_supervision.h:4:0: information: Include file: <cstdint> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstdint>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\elementary_supervision.h:5:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\deadline_supervision.h:4:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\deadline_supervision.h:5:0: information: Include file: <condition_variable> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <condition_variable>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\deadline_supervision.h:6:0: information: Include file: <mutex> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <mutex>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\deadline_supervision.h:7:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\global_supervision.h:4:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\execution_management.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\elementary_supervision.h:36:17: style: Class 'ElementarySupervision' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
                ElementarySupervision(
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < FunctionGroupState , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < FunctionGroupState , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < ExecutionErrorEvent , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < ExecutionErrorEvent , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\alive_supervision.h:50:18: style: The destructor '~AliveSupervision' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
                ~AliveSupervision();
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\elementary_supervision.h:44:26: note: Virtual destructor in base class
                virtual ~ElementarySupervision() noexcept = default;
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\alive_supervision.h:50:18: note: Destructor in derived class
                ~AliveSupervision();
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\deadline_supervision.h:43:18: style: The destructor '~DeadlineSupervision' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
                ~DeadlineSupervision();
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\elementary_supervision.h:44:26: note: Virtual destructor in base class
                virtual ~ElementarySupervision() noexcept = default;
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\deadline_supervision.h:43:18: note: Destructor in derived class
                ~DeadlineSupervision();
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\execution_management.cpp:65:25: performance: Function parameter 'functionGroupShortName' should be passed by const reference. [passedByValue]
            std::string functionGroupShortName,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\sm\trigger.h:40:26: performance: Function parameter 'state' should be passed by const reference. [passedByValue]
            void Write(T state)
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\platform_health_management.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\platform_health_management.h:22:44: style: inconclusive: Member variable 'PlatformHealthManagement::cFunctionGroup' is in the wrong place in the initializer list. [initializerList]
            const ara::exec::FunctionGroup cFunctionGroup;
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\platform_health_management.cpp:15:42: note: Member variable 'PlatformHealthManagement::cFunctionGroup' is in the wrong place in the initializer list.
                                         cFunctionGroup{ara::exec::FunctionGroup::Create(functionGroup).Value()},
                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\platform_health_management.h:22:44: note: Member variable 'PlatformHealthManagement::cFunctionGroup' is in the wrong place in the initializer list.
            const ara::exec::FunctionGroup cFunctionGroup;
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < ActivationReturnType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < ActivationReturnType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < std :: chrono :: time_point < std :: chrono :: steady_clock > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < std :: chrono :: time_point < std :: chrono :: steady_clock > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\platform_health_management.cpp:13:25: performance: Function parameter 'functionGroup' should be passed by const reference. [passedByValue]
            std::string functionGroup) : ara::exec::helper::ModelledProcess(cAppId, poller),
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\platform_health_management.cpp:72:25: performance: Function parameter 'checkpointIdStr' should be passed by const reference. [passedByValue]
            std::string checkpointIdStr,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\state_management.cpp:1:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\platform\state_management.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < FunctionGroupState >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < FunctionGroupState >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < ExecutionErrorEvent >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < ExecutionErrorEvent >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\e2e\profile11.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.h:35:25: style: inconclusive: Member variable 'Entry::mMajorVersion' is in the wrong place in the initializer list. [initializerList]
                uint8_t mMajorVersion;
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.cpp:27:43: note: Member variable 'Entry::mMajorVersion' is in the wrong place in the initializer list.
                                          mMajorVersion{other.mMajorVersion}
                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.h:35:25: note: Member variable 'Entry::mMajorVersion' is in the wrong place in the initializer list.
                uint8_t mMajorVersion;
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.cpp:92:28: style: Variable 'firstOption' can be declared as reference to const [constVariableReference]
                for (auto &firstOption : mFirstOptions)
                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.cpp:100:28: style: Variable 'secondOption' can be declared as reference to const [constVariableReference]
                for (auto &secondOption : mSecondOptions)
                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.cpp:92:17: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                for (auto &firstOption : mFirstOptions)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\entry.cpp:100:17: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                for (auto &secondOption : mSecondOptions)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:26:64: style: inconclusive: Function 'EventgroupEntry' argument 1 names different: declaration 'other' definition 'entry'. [funcArgNamesDifferent]
            EventgroupEntry::EventgroupEntry(EventgroupEntry &&entry) : Entry{std::move(entry)},
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.h:38:51: note: Function 'EventgroupEntry' argument 1 names different: declaration 'other' definition 'entry'.
                EventgroupEntry(EventgroupEntry &&other);
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:26:64: note: Function 'EventgroupEntry' argument 1 names different: declaration 'other' definition 'entry'.
            EventgroupEntry::EventgroupEntry(EventgroupEntry &&entry) : Entry{std::move(entry)},
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:27:82: warning: inconclusive: Access of moved variable 'entry'. [accessMoved]
                                                                        mCounter{entry.mCounter},
                                                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:26:79: note: Calling std::move(entry)
            EventgroupEntry::EventgroupEntry(EventgroupEntry &&entry) : Entry{std::move(entry)},
                                                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:27:82: note: Access of moved variable 'entry'.
                                                                        mCounter{entry.mCounter},
                                                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:28:87: warning: inconclusive: Access of moved variable 'entry'. [accessMoved]
                                                                        mEventgroupId{entry.mEventgroupId}
                                                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:26:79: note: Calling std::move(entry)
            EventgroupEntry::EventgroupEntry(EventgroupEntry &&entry) : Entry{std::move(entry)},
                                                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:28:87: note: Access of moved variable 'entry'.
                                                                        mEventgroupId{entry.mEventgroupId}
                                                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:35:28: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                mCounter = other.mCounter;
                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:34:34: note: Calling std::move(other)
                Entry::operator=(std::move(other));
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:35:28: note: Access of moved variable 'other'.
                mCounter = other.mCounter;
                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:36:33: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                mEventgroupId = other.mEventgroupId;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:34:34: note: Calling std::move(other)
                Entry::operator=(std::move(other));
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\eventgroup_entry.cpp:36:33: note: Access of moved variable 'other'.
                mEventgroupId = other.mEventgroupId;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\service_entry.cpp:20:78: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                                                               mMinorVersion{other.mMinorVersion}
                                                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\service_entry.cpp:19:70: note: Calling std::move(other)
            ServiceEntry::ServiceEntry(ServiceEntry &&other) : Entry{std::move(other)},
                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\service_entry.cpp:20:78: note: Access of moved variable 'other'.
                                                               mMinorVersion{other.mMinorVersion}
                                                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\service_entry.cpp:27:33: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                mMinorVersion = other.mMinorVersion;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\service_entry.cpp:26:34: note: Calling std::move(other)
                Entry::operator=(std::move(other));
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\entry\service_entry.cpp:27:33: note: Access of moved variable 'other'.
                mMinorVersion = other.mMinorVersion;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.cpp:1:0: information: Include file: <sstream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sstream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ipv4_address.cpp:18:50: performance: Function parameter 'ipAddress' should be passed by const reference. [passedByValue]
            Ipv4Address::Ipv4Address(std::string ipAddress)
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.cpp:1:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.cpp:10:23: warning: Member variable 'TtlTimer::mSignalFlag' is not initialized in the constructor. [uninitMemberVar]
            TtlTimer::TtlTimer() noexcept : mLock(mMutex, std::defer_lock),
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.cpp:74:76: style: Condition 'mDisposing' is always false [knownConditionTrueFalse]
                    if (_status == std::cv_status::timeout || mTtl == 0 || mDisposing)
                                                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.cpp:60:34: note: Assuming that condition 'mDisposing' is not redundant
                if (mTtl == 0 || mDisposing)
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\ttl_timer.cpp:74:76: note: Condition 'mDisposing' is always false
                    if (_status == std::cv_status::timeout || mTtl == 0 || mDisposing)
                                                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\ipv4_endpoint_option.h:44:37: performance: Function 'IpAddress()' should return member 'mIpAddress' by const reference. [returnByReference]
                helper::Ipv4Address IpAddress() const noexcept;
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\ipv4_endpoint_option.cpp:49:37: performance: Function parameter 'ipAddress' should be passed by const reference. [passedByValue]
                helper::Ipv4Address ipAddress,
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\ipv4_endpoint_option.cpp:66:37: performance: Function parameter 'ipAddress' should be passed by const reference. [passedByValue]
                helper::Ipv4Address ipAddress,
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\ipv4_endpoint_option.cpp:92:37: performance: Function parameter 'ipAddress' should be passed by const reference. [passedByValue]
                helper::Ipv4Address ipAddress,
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\loadbalancing_option.h:4:0: information: Include file: <memory> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <memory>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\fsm\subscribed_state.h:4:0: information: Include file: <cstdint> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstdint>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\fsm\subscribed_state.cpp:13:38: warning: Member variable 'SubscribedState::mSubscriptionCounter' is not initialized in the constructor. [uninitMemberVar]
                    SubscribedState::SubscribedState() noexcept : helper::MachineState<helper::PubSubState>(helper::PubSubState::Subscribed)
                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\someip_pubsub_client.h:4:0: information: Include file: <condition_variable> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <condition_variable>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\someip_pubsub_client.cpp:29:32: style: Variable 'entry' can be declared as reference to const [constVariableReference]
                    for (auto &entry : message.Entries())
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\someip_pubsub_server.cpp:47:38: style: Variable '_eventgroupEntry' can be declared as pointer to const [constVariablePointer]
                            if (auto _eventgroupEntry = dynamic_cast<entry::EventgroupEntry *>(_entry.get()))
                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\rpc_server.cpp:1:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\socket_rpc_client.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\socket_rpc_server.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\rpc\someip_rpc_message.cpp:1:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\main_state.cpp:1:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\main_state.cpp:2:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\sd_network_layer.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\sd_network_layer.cpp:55:25: error: Uninitialized variable: _port [legacyUninitvar]
                        _port == cPort && _ipAddress == cNicIpAddress)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.h:31:50: style: inconclusive: Member variable 'SomeIpSdClient::mOfferingLock' is in the wrong place in the initializer list. [initializerList]
                    std::unique_lock<std::mutex> mOfferingLock;
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.cpp:35:47: note: Member variable 'SomeIpSdClient::mOfferingLock' is in the wrong place in the initializer list.
                                              mOfferingLock(mOfferingMutex, std::defer_lock),
                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.h:31:50: note: Member variable 'SomeIpSdClient::mOfferingLock' is in the wrong place in the initializer list.
                    std::unique_lock<std::mutex> mOfferingLock;
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.h:52:26: performance: inconclusive: Technically the member function 'ara::com::someip::sd::SomeIpSdClient::tryExtractOfferedEndpoint' can be static (but you may consider moving to unnamed namespace). [functionStatic]
                    bool tryExtractOfferedEndpoint(
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.cpp:92:38: note: Technically the member function 'ara::com::someip::sd::SomeIpSdClient::tryExtractOfferedEndpoint' can be static (but you may consider moving to unnamed namespace).
                bool SomeIpSdClient::tryExtractOfferedEndpoint(
                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.h:52:26: note: Technically the member function 'ara::com::someip::sd::SomeIpSdClient::tryExtractOfferedEndpoint' can be static (but you may consider moving to unnamed namespace).
                    bool tryExtractOfferedEndpoint(
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.cpp:74:38: style: Variable '_serviceEnty' can be declared as pointer to const [constVariablePointer]
                            if (auto _serviceEnty = dynamic_cast<entry::ServiceEntry *>(_entry.get()))
                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:52:32: style: Variable 'entry' can be declared as reference to const [constVariableReference]
                    for (auto &entry : mEntries)
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:54:36: style: Variable 'firstOption' can be declared as reference to const [constVariableReference]
                        for (auto &firstOption : entry->FirstOptions())
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:59:36: style: Variable 'secondOption' can be declared as reference to const [constVariableReference]
                        for (auto &secondOption : entry->SecondOptions())
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:136:32: style: Variable 'entry' can be declared as reference to const [constVariableReference]
                    for (auto &entry : mEntries)
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:142:36: style: Variable 'firstOption' can be declared as reference to const [constVariableReference]
                        for (auto &firstOption : entry->FirstOptions())
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:150:36: style: Variable 'secondOption' can be declared as reference to const [constVariableReference]
                        for (auto &secondOption : entry->SecondOptions())
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:24:87: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                                                                            mRebooted{other.mRebooted},
                                                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:23:91: note: Calling std::move(other)
                SomeIpSdMessage::SomeIpSdMessage(SomeIpSdMessage &&other) : SomeIpMessage{std::move(other)},
                                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:24:87: note: Access of moved variable 'other'.
                                                                            mRebooted{other.mRebooted},
                                                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:25:96: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                                                                            mEntries{std::move(other.mEntries)}
                                                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:23:91: note: Calling std::move(other)
                SomeIpSdMessage::SomeIpSdMessage(SomeIpSdMessage &&other) : SomeIpMessage{std::move(other)},
                                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:25:96: note: Access of moved variable 'other'.
                                                                            mEntries{std::move(other.mEntries)}
                                                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:32:33: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                    mRebooted = other.mRebooted;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:31:46: note: Calling std::move(other)
                    SomeIpMessage::operator=(std::move(other));
                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:32:33: note: Access of moved variable 'other'.
                    mRebooted = other.mRebooted;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:33:42: warning: inconclusive: Access of moved variable 'other'. [accessMoved]
                    mEntries = std::move(other.mEntries);
                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:31:46: note: Calling std::move(other)
                    SomeIpMessage::operator=(std::move(other));
                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:33:42: note: Access of moved variable 'other'.
                    mEntries = std::move(other.mEntries);
                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:56:37: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                            _result += cOptionLengthFieldSize + firstOption->Length();
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:61:37: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                            _result += cOptionLengthFieldSize + secondOption->Length();
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:216:45: error: Uninitialized variable: _numberOfFirstOptions [legacyUninitvar]
                        for (int i = 0; i < _numberOfFirstOptions; i++)
                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_message.cpp:225:45: error: Uninitialized variable: _numberOfSecondOptions [legacyUninitvar]
                        for (int i = 0; i < _numberOfSecondOptions; i++)
                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_server.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_server.cpp:2:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_server.cpp:19:41: performance: Function parameter 'ipAddress' should be passed by const reference. [passedByValue]
                    helper::Ipv4Address ipAddress,
                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_server.cpp:105:38: style: Variable '_serviceEnty' can be declared as pointer to const [constVariablePointer]
                            if (auto _serviceEnty = dynamic_cast<entry::ServiceEntry *>(_entry.get()))
                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\error_code.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.h:69:25: performance: Function 'ToString()' should return member 'mMetaModelIdentifier' by const reference. [returnByReference]
            std::string ToString() const noexcept;
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\instance_specifier.cpp:8:25: performance: Function parameter 'metaModelIdentifier' should be passed by const reference. [passedByValue]
            std::string metaModelIdentifier) : mMetaModelIdentifier{metaModelIdentifier}
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < ConditionType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < ConditionType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < ConditionType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < ConditionType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:114:44: performance: inconclusive: Technically the member function 'ara::diag::Conversation::GetDiagnosticSessionShortName' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            ara::core::Result<std::string> GetDiagnosticSessionShortName(
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:112:54: note: Technically the member function 'ara::diag::Conversation::GetDiagnosticSessionShortName' can be static (but you may consider moving to unnamed namespace).
        ara::core::Result<std::string> Conversation::GetDiagnosticSessionShortName(
                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:114:44: note: Technically the member function 'ara::diag::Conversation::GetDiagnosticSessionShortName' can be static (but you may consider moving to unnamed namespace).
            ara::core::Result<std::string> GetDiagnosticSessionShortName(
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:130:44: performance: inconclusive: Technically the member function 'ara::diag::Conversation::GetDiagnosticSecurityLevelShortName' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            ara::core::Result<std::string> GetDiagnosticSecurityLevelShortName(
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:158:54: note: Technically the member function 'ara::diag::Conversation::GetDiagnosticSecurityLevelShortName' can be static (but you may consider moving to unnamed namespace).
        ara::core::Result<std::string> Conversation::GetDiagnosticSecurityLevelShortName(
                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:130:44: note: Technically the member function 'ara::diag::Conversation::GetDiagnosticSecurityLevelShortName' can be static (but you may consider moving to unnamed namespace).
            ara::core::Result<std::string> GetDiagnosticSecurityLevelShortName(
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.h:60:13: style: Class 'Conversation' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Conversation(const MetaInfo &metaInfo);
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:18:105: style: Parameter 'metaInfo' can be declared as reference to const [constParameterReference]
        ara::core::Result<std::reference_wrapper<Conversation>> Conversation::GetConversation(MetaInfo &metaInfo)
                                                                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.cpp:1:0: information: Include file: <chrono> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <chrono>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.cpp:10:34: warning: Member variable 'TimerBasedDebouncer::mIsPassing' is not initialized in the constructor. [uninitMemberVar]
            TimerBasedDebouncer::TimerBasedDebouncer(
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:28:33: style: inconclusive: Member variable 'TimerBasedDebouncer::mDefaultValues' is in the wrong place in the initializer list. [initializerList]
                const TimeBased mDefaultValues;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.cpp:14:44: note: Member variable 'TimerBasedDebouncer::mDefaultValues' is in the wrong place in the initializer list.
                                           mDefaultValues{defaultValues},
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:28:33: note: Member variable 'TimerBasedDebouncer::mDefaultValues' is in the wrong place in the initializer list.
                const TimeBased mDefaultValues;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:60:30: style: Virtual function 'Reset' is called from destructor '~TimerBasedDebouncer()' at line 132. Dynamic binding is not used. [virtualCallInConstructor]
                virtual void Reset() override;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.cpp:132:17: note: Calling Reset
                Reset();
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\debouncing\timer_based_debouncer.h:60:30: note: Reset is a virtual function
                virtual void Reset() override;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\diag_error_domain.h:4:0: information: Include file: <exception> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <exception>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\diag_error_domain.h:62:34: performance: inconclusive: Technically the member function 'ara::diag::DiagErrorDomain::MakeErrorCode' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            ara::core::ErrorCode MakeErrorCode(DiagErrc code) noexcept;
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\diag_error_domain.cpp:66:47: note: Technically the member function 'ara::diag::DiagErrorDomain::MakeErrorCode' can be static (but you may consider moving to unnamed namespace).
        ara::core::ErrorCode DiagErrorDomain::MakeErrorCode(DiagErrc code) noexcept
                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\diag_error_domain.h:62:34: note: Technically the member function 'ara::diag::DiagErrorDomain::MakeErrorCode' can be static (but you may consider moving to unnamed namespace).
            ara::core::ErrorCode MakeErrorCode(DiagErrc code) noexcept;
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\reentrancy.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.h:4:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.h:51:17: style: Class 'TransferData' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
                TransferData(const ara::core::InstanceSpecifier &specifier) noexcept;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.h:52:18: style: The destructor '~TransferData' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
                ~TransferData() noexcept = default;
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\routable_uds_service.h:111:26: note: Virtual destructor in base class
                virtual ~RoutableUdsService() noexcept = default;
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.h:52:18: note: Destructor in derived class
                ~TransferData() noexcept = default;
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\download.cpp:20:34: performance: Function parameter 'memoryAddressAndSize' should be passed by const reference. [passedByValue]
            std::vector<uint8_t> memoryAddressAndSize,
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.h:5:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.h:6:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.h:82:36: style: inconclusive: Technically the member function 'ara::diag::DTCInformation::GetNumberOfStoredEntries' can be const. [functionConst]
            core::Result<uint32_t> GetNumberOfStoredEntries();
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:90:48: note: Technically the member function 'ara::diag::DTCInformation::GetNumberOfStoredEntries' can be const.
        core::Result<uint32_t> DTCInformation::GetNumberOfStoredEntries()
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.h:82:36: note: Technically the member function 'ara::diag::DTCInformation::GetNumberOfStoredEntries' can be const.
            core::Result<uint32_t> GetNumberOfStoredEntries();
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < UdsDtcStatusByteType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < UdsDtcStatusByteType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:29:13: style: Class 'Result < ControlDtcStatusType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(const T &t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:34:13: style: Class 'Result < ControlDtcStatusType , ErrorCode >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Result(T &&t) noexcept(
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < UdsDtcStatusByteType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < UdsDtcStatusByteType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < uint32_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < uint32_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < ControlDtcStatusType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < ControlDtcStatusType >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\ecu_reset_request.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < uint8_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < uint8_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\ecu_reset_request.cpp:111:33: error: Uninitialized variable: _powerDownTimeRequired [legacyUninitvar]
                if (_succeed && _powerDownTimeRequired)
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:2:0: information: Include file: <limits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:3:0: information: Include file: <bitset> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <bitset>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.h:108:48: style: inconclusive: Technically the member function 'ara::diag::Event::GetDebouncingStatus' can be const. [functionConst]
            ara::core::Result<DebouncingState> GetDebouncingStatus();
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:115:51: note: Technically the member function 'ara::diag::Event::GetDebouncingStatus' can be const.
        ara::core::Result<DebouncingState> Event::GetDebouncingStatus()
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.h:108:48: note: Technically the member function 'ara::diag::Event::GetDebouncingStatus' can be const.
            ara::core::Result<DebouncingState> GetDebouncingStatus();
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < EventStatusByte >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < EventStatusByte >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < bool >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < bool >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < DebouncingState >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < DebouncingState >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:25:13: style: Class 'Optional < int8_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(const T &value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:30:13: style: Class 'Optional < int8_t >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            Optional(T &&value)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:24:71: performance: Function parameter 'statusBits' should be passed by const reference. [passedByValue]
        void Event::SetEventStatusBits(std::map<EventStatusBit, bool> statusBits)
                                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.cpp:12:68: performance: Function parameter 'key' should be passed by const reference. [passedByValue]
        core::Optional<std::string> MetaInfo::GetValue(std::string key)
                                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\monitor.cpp:8:18: warning: Member variable 'Monitor::mDebouncer' is not initialized in the constructor. [uninitMemberVarPrivate]
        Monitor::Monitor(
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\monitor.cpp:54:13: warning: Class 'Monitor' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
            mDebouncer =
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\monitor.cpp:54:13: warning: Class 'Monitor' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
            mDebouncer =
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\operation_cycle.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\delay_timer.h:4:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\delay_timer.h:5:0: information: Include file: <condition_variable> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <condition_variable>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\nrc_exception.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\nrc_exception.h:5:0: information: Include file: <exception> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <exception>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer.cpp:148:38: performance: Function parameter 'memoryAddressAndSize' should be passed by const reference. [passedByValue]
                std::vector<uint8_t> memoryAddressAndSize,
                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer.cpp:149:27: style: Parameter 'metaInfo' can be declared as reference to const [constParameterReference]
                MetaInfo &metaInfo,
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer.cpp:135:29: error: Uninitialized variable: _maxNumberOfBlockLength [legacyUninitvar]
                            _maxNumberOfBlockLength};
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer.cpp:169:55: error: Uninitialized variable: _memoryAddress [legacyUninitvar]
                        _succeed = TryRequestTransfer(_memoryAddress, _memorySize);
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer.cpp:169:71: error: Uninitialized variable: _memorySize [legacyUninitvar]
                        _succeed = TryRequestTransfer(_memoryAddress, _memorySize);
                                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer.cpp:154:25: style: Unused variable: _nrc [unusedVariable]
                uint8_t _nrc;
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer_exit.h:26:18: style: The destructor '~RequestTransferExit' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
                ~RequestTransferExit() noexcept = default;
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\routable_uds_service.h:111:26: note: Virtual destructor in base class
                virtual ~RoutableUdsService() noexcept = default;
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\request_transfer_exit.h:26:18: note: Destructor in derived class
                ~RequestTransferExit() noexcept = default;
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.cpp:14:27: warning: Member variable 'TransferData::mMemoryAddress' is not initialized in the constructor. [uninitMemberVar]
            TransferData::TransferData(
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.cpp:14:27: warning: Member variable 'TransferData::mMemorySize' is not initialized in the constructor. [uninitMemberVar]
            TransferData::TransferData(
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\transfer_data.cpp:14:27: warning: Member variable 'TransferData::mMemoryPool' is not initialized in the constructor. [uninitMemberVar]
            TransferData::TransferData(
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.h:101:14: style: The destructor '~SecurityAccess' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
            ~SecurityAccess() noexcept = default;
             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\routable_uds_service.h:111:26: note: Virtual destructor in base class
                virtual ~RoutableUdsService() noexcept = default;
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.h:101:14: note: Destructor in derived class
            ~SecurityAccess() noexcept = default;
             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.cpp:190:34: performance: Function parameter 'securityAccessDataRecord' should be passed by const reference. [passedByValue]
            std::vector<uint8_t> securityAccessDataRecord,
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.cpp:318:34: performance: Function parameter 'key' should be passed by const reference. [passedByValue]
            std::vector<uint8_t> key,
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.cpp:191:23: style: Parameter 'metaInfo' can be declared as reference to const [constParameterReference]
            MetaInfo &metaInfo,
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.cpp:107:53: error: Uninitialized variable: _nrc [legacyUninitvar]
                GenerateNegativeResponse(_response, _nrc);
                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.cpp:253:44: error: Uninitialized variable: _attemptThreshold [legacyUninitvar]
                if (mFailedUnlockAttempt > _attemptThreshold)
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\security_access.cpp:220:48: style: Variable '_securityLevel.second.Unlocked' is assigned a value that is never used. [unreadVariable]
                _securityLevel.second.Unlocked = false;
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\upload.cpp:20:34: performance: Function parameter 'memoryAddressAndSize' should be passed by const reference. [passedByValue]
            std::vector<uint8_t> memoryAddressAndSize,
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:1:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:58:48: performance: inconclusive: Technically the member function 'ara::exec::DeterministicClient::WaitForActivation' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            core::Result<ActivationReturnType> WaitForActivation();
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:56:65: note: Technically the member function 'ara::exec::DeterministicClient::WaitForActivation' can be static (but you may consider moving to unnamed namespace).
        core::Result<ActivationReturnType> DeterministicClient::WaitForActivation()
                                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:58:48: note: Technically the member function 'ara::exec::DeterministicClient::WaitForActivation' can be static (but you may consider moving to unnamed namespace).
            core::Result<ActivationReturnType> WaitForActivation();
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:87:22: performance: inconclusive: Technically the member function 'ara::exec::DeterministicClient::GetRandom' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            uint64_t GetRandom() noexcept;
                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:65:39: note: Technically the member function 'ara::exec::DeterministicClient::GetRandom' can be static (but you may consider moving to unnamed namespace).
        uint64_t DeterministicClient::GetRandom() noexcept
                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:87:22: note: Technically the member function 'ara::exec::DeterministicClient::GetRandom' can be static (but you may consider moving to unnamed namespace).
            uint64_t GetRandom() noexcept;
                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:91:18: performance: inconclusive: Technically the member function 'ara::exec::DeterministicClient::SetRandomSeed' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            void SetRandomSeed(uint64_t seed) noexcept;
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:70:35: note: Technically the member function 'ara::exec::DeterministicClient::SetRandomSeed' can be static (but you may consider moving to unnamed namespace).
        void DeterministicClient::SetRandomSeed(uint64_t seed) noexcept
                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:91:18: note: Technically the member function 'ara::exec::DeterministicClient::SetRandomSeed' can be static (but you may consider moving to unnamed namespace).
            void SetRandomSeed(uint64_t seed) noexcept;
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:95:37: performance: inconclusive: Technically the member function 'ara::exec::DeterministicClient::GetActivationTime' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            core::Result<TimeStamp> GetActivationTime() noexcept;
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:75:75: note: Technically the member function 'ara::exec::DeterministicClient::GetActivationTime' can be static (but you may consider moving to unnamed namespace).
        core::Result<DeterministicClient::TimeStamp> DeterministicClient::GetActivationTime() noexcept
                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:95:37: note: Technically the member function 'ara::exec::DeterministicClient::GetActivationTime' can be static (but you may consider moving to unnamed namespace).
            core::Result<TimeStamp> GetActivationTime() noexcept;
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:99:37: performance: inconclusive: Technically the member function 'ara::exec::DeterministicClient::GetNextActivationTime' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            core::Result<TimeStamp> GetNextActivationTime();
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:81:75: note: Technically the member function 'ara::exec::DeterministicClient::GetNextActivationTime' can be static (but you may consider moving to unnamed namespace).
        core::Result<DeterministicClient::TimeStamp> DeterministicClient::GetNextActivationTime()
                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:99:37: note: Technically the member function 'ara::exec::DeterministicClient::GetNextActivationTime' can be static (but you may consider moving to unnamed namespace).
            core::Result<TimeStamp> GetNextActivationTime();
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_client.cpp:1:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_client.h:36:27: performance: inconclusive: Technically the member function 'ara::exec::ExecutionClient::generateException' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            ExecException generateException(ExecErrc executionErrorCode) const;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_client.cpp:24:40: note: Technically the member function 'ara::exec::ExecutionClient::generateException' can be static (but you may consider moving to unnamed namespace).
        ExecException ExecutionClient::generateException(
                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_client.h:36:27: note: Technically the member function 'ara::exec::ExecutionClient::generateException' can be static (but you may consider moving to unnamed namespace).
            ExecException generateException(ExecErrc executionErrorCode) const;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group.h:18:13: style: Class 'FunctionGroup' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
            FunctionGroup(std::string metaModelIdentifier);
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group.cpp:7:50: performance: Function parameter 'metaModelIdentifier' should be passed by const reference. However it seems that 'FunctionGroup' is a callback function. [passedByValueCallback]
        FunctionGroup::FunctionGroup(std::string metaModelIdentifier) : mInstnaceSpecifier{metaModelIdentifier}
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group.cpp:14:49: note: Function pointer used here.
            core::Result<FunctionGroup> _result{FunctionGroup{metaModelIdentifier}};
                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group.cpp:7:50: note: Function parameter 'metaModelIdentifier' should be passed by const reference. However it seems that 'FunctionGroup' is a callback function.
        FunctionGroup::FunctionGroup(std::string metaModelIdentifier) : mInstnaceSpecifier{metaModelIdentifier}
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group.cpp:12:25: performance: Function parameter 'metaModelIdentifier' should be passed by const reference. [passedByValue]
            std::string metaModelIdentifier)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group_state.cpp:1:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group_state.cpp:11:25: performance: Function parameter 'metaModelIdentifier' should be passed by const reference. [passedByValue]
            std::string metaModelIdentifier) : mFunctionGroup{functionGroup},
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\function_group_state.cpp:18:25: performance: Function parameter 'metaModelIdentifier' should be passed by const reference. [passedByValue]
            std::string metaModelIdentifier)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:26:40: style: inconclusive: Member variable 'ModelledProcess::mLoggingFramework' is in the wrong place in the initializer list. [initializerList]
                log::LoggingFramework *mLoggingFramework;
                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.cpp:17:73: note: Member variable 'ModelledProcess::mLoggingFramework' is in the wrong place in the initializer list.
                                                                        mLoggingFramework{log::LoggingFramework::Create(appId, cLogMode)},
                                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:26:40: note: Member variable 'ModelledProcess::mLoggingFramework' is in the wrong place in the initializer list.
                log::LoggingFramework *mLoggingFramework;
                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.cpp:55:27: style: Local variable 'cSuccessfulExitCode' shadows outer variable [shadowVariable]
                const int cSuccessfulExitCode{0};
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.h:39:27: note: Shadowed declaration
                const int cSuccessfulExitCode{0};
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.cpp:55:27: note: Shadow variable
                const int cSuccessfulExitCode{0};
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\helper\modelled_process.cpp:16:29: performance: Function parameter 'appId' should be passed by const reference. [passedByValue]
                std::string appId, AsyncBsdSocketLib::Poller *poller) : Poller{poller},
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_client.h:72:47: performance: inconclusive: Technically the member function 'ara::exec::StateClient::GetExecutionError' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            core::Result<ExecutionErrorEvent> GetExecutionError(
                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_client.cpp:156:56: note: Technically the member function 'ara::exec::StateClient::GetExecutionError' can be static (but you may consider moving to unnamed namespace).
        core::Result<ExecutionErrorEvent> StateClient::GetExecutionError(
                                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_client.h:72:47: note: Technically the member function 'ara::exec::StateClient::GetExecutionError' can be static (but you may consider moving to unnamed namespace).
            core::Result<ExecutionErrorEvent> GetExecutionError(
                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.h:33:18: performance: inconclusive: Technically the member function 'ara::exec::StateServer::injectErrorCode' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            void injectErrorCode(
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.cpp:57:27: note: Technically the member function 'ara::exec::StateServer::injectErrorCode' can be static (but you may consider moving to unnamed namespace).
        void StateServer::injectErrorCode(
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.h:33:18: note: Technically the member function 'ara::exec::StateServer::injectErrorCode' can be static (but you may consider moving to unnamed namespace).
            void injectErrorCode(
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.cpp:64:46: style: inconclusive: Function 'notify' argument 1 names different: declaration 'functionGroup' definition 'funcitonGroup'. [funcArgNamesDifferent]
        void StateServer::notify(std::string funcitonGroup, std::string state)
                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.h:36:37: note: Function 'notify' argument 1 names different: declaration 'functionGroup' definition 'funcitonGroup'.
            void notify(std::string functionGroup, std::string state);
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.cpp:64:46: note: Function 'notify' argument 1 names different: declaration 'functionGroup' definition 'funcitonGroup'.
        void StateServer::notify(std::string funcitonGroup, std::string state)
                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\worker_thread.h:28:22: performance: inconclusive: Technically the member function 'ara::exec::WorkerThread::GetRandom' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            uint64_t GetRandom() noexcept;
                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\worker_thread.cpp:11:32: note: Technically the member function 'ara::exec::WorkerThread::GetRandom' can be static (but you may consider moving to unnamed namespace).
        uint64_t WorkerThread::GetRandom() noexcept
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\worker_thread.h:28:22: note: Technically the member function 'ara::exec::WorkerThread::GetRandom' can be static (but you may consider moving to unnamed namespace).
            uint64_t GetRandom() noexcept;
                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.cpp:1:0: information: Include file: <sstream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sstream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.cpp:2:0: information: Include file: <iomanip> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iomanip>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.h:102:25: performance: Function 'ToString()' should return member 'mLogs' by const reference. [returnByReference]
            std::string ToString() const noexcept;
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.cpp:130:68: performance: Function parameter 'value' should be passed by const reference. [passedByValue]
        LogStream &LogStream::operator<<(std::vector<std::uint8_t> value)
                                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.cpp:149:56: performance: Function parameter 'file' should be passed by const reference. [passedByValue]
        LogStream &LogStream::WithLocation(std::string file, int line)
                                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.h:27:25: performance: inconclusive: Technically the member function 'ara::log::Logger::RemoteClientState' can be static (but you may consider moving to unnamed namespace). [functionStatic]
            ClientState RemoteClientState() const noexcept;
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:15:29: note: Technically the member function 'ara::log::Logger::RemoteClientState' can be static (but you may consider moving to unnamed namespace).
        ClientState Logger::RemoteClientState() const noexcept
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.h:27:25: note: Technically the member function 'ara::log::Logger::RemoteClientState' can be static (but you may consider moving to unnamed namespace).
            ClientState RemoteClientState() const noexcept;
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:80:25: performance: Function parameter 'ctxId' should be passed by const reference. [passedByValue]
            std::string ctxId,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:81:25: performance: Function parameter 'ctxDescription' should be passed by const reference. [passedByValue]
            std::string ctxDescription,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.h:51:18: style: inconclusive: Technically the member function 'ara::log::LoggingFramework::Log' can be const. [functionConst]
            void Log(
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:41:32: note: Technically the member function 'ara::log::LoggingFramework::Log' can be const.
        void LoggingFramework::Log(
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.h:51:18: note: Technically the member function 'ara::log::LoggingFramework::Log' can be const.
            void Log(
                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:15:25: performance: Function parameter 'ctxId' should be passed by const reference. [passedByValue]
            std::string ctxId,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:16:25: performance: Function parameter 'ctxDescription' should be passed by const reference. [passedByValue]
            std::string ctxDescription)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:27:25: performance: Function parameter 'ctxId' should be passed by const reference. [passedByValue]
            std::string ctxId,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:28:25: performance: Function parameter 'ctxDescription' should be passed by const reference. [passedByValue]
            std::string ctxDescription,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:57:25: performance: Function parameter 'appId' should be passed by const reference. [passedByValue]
            std::string appId,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:60:25: performance: Function parameter 'appDescription' should be passed by const reference. [passedByValue]
            std::string appDescription)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:85:25: performance: Function parameter 'appId' should be passed by const reference. [passedByValue]
            std::string appId,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:86:25: performance: Function parameter 'filePath' should be passed by const reference. [passedByValue]
            std::string filePath,
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logging_framework.cpp:88:25: performance: Function parameter 'appDescription' should be passed by const reference. [passedByValue]
            std::string appDescription)
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\console_log_sink.cpp:10:29: performance: Function parameter 'appId' should be passed by const reference. [passedByValue]
                std::string appId,
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\console_log_sink.cpp:11:29: performance: Function parameter 'appDescription' should be passed by const reference. [passedByValue]
                std::string appDescription) : LogSink(appId, appDescription)
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\file_log_sink.cpp:10:29: performance: Function parameter 'appId' should be passed by const reference. [passedByValue]
                std::string appId,
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\file_log_sink.cpp:11:29: performance: Function parameter 'appDescription' should be passed by const reference. [passedByValue]
                std::string appDescription,
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\file_log_sink.cpp:12:29: performance: Function parameter 'logFilePath' should be passed by const reference. [passedByValue]
                std::string logFilePath) : LogSink(appId, appDescription),
                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.cpp:31:41: style: Obsolete function 'std::asctime' called. It is recommended to use 'strftime' instead. [asctimeCalled]
                char *_timestamp = std::asctime(_localtime);
                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.h:35:27: performance: inconclusive: Technically the member function 'ara::log::sink::LogSink::GetTimestamp' can be static (but you may consider moving to unnamed namespace). [functionStatic]
                LogStream GetTimestamp() const;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.cpp:27:32: note: Technically the member function 'ara::log::sink::LogSink::GetTimestamp' can be static (but you may consider moving to unnamed namespace).
            LogStream LogSink::GetTimestamp() const
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.h:35:27: note: Technically the member function 'ara::log::sink::LogSink::GetTimestamp' can be static (but you may consider moving to unnamed namespace).
                LogStream GetTimestamp() const;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.cpp:9:61: performance: Function parameter 'appDescription' should be passed by const reference. [passedByValue]
            LogSink::LogSink(std::string appId, std::string appDescription) : mApplicationId{appId},
                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.cpp:30:26: style: Variable '_localtime' can be declared as pointer to const [constVariablePointer]
                std::tm *_localtime = std::localtime(&_time);
                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\sink\log_sink.cpp:31:23: style: Variable '_timestamp' can be declared as pointer to const [constVariablePointer]
                char *_timestamp = std::asctime(_localtime);
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervised_entity.cpp:3:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\alive_supervision.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\alive_supervision.cpp:2:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\deadline_supervision.cpp:12:34: warning: Member variable 'DeadlineSupervision::mTargetIsReached' is not initialized in the constructor. [uninitMemberVar]
            DeadlineSupervision::DeadlineSupervision(
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\phm\supervisors\elementary_supervision.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_node.cpp:1:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_node.cpp:2:0: information: Include file: <sstream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sstream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_node.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.cpp:1:0: information: Include file: <stdexcept> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdexcept>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.cpp:2:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.cpp:33:21: style: The scope of the variable 'cXmlChild' can be reduced. [variableScope]
        const char *cXmlChild{"xml"};
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\arxml_reader.cpp:34:21: style: The scope of the variable 'cVersionAttrib' can be reduced. [variableScope]
        const char *cVersionAttrib{"version"};
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 40 configurations. Use --force to check all configurations. [toomanyconfigs]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:20:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:21:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:22:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:23:0: information: Include file: <limits.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:30:0: information: Include file: <math.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <math.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:31:0: information: Include file: <float.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <float.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:35:0: information: Include file: <istream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <istream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:36:0: information: Include file: <ostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <ostream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:37:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:41:0: information: Include file: <new> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <new>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:181:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1941:38: style: inconclusive: Boolean expression 'data[0]=='<'' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
  if (size < 6 || !((data[0] == '<') & (data[1] == '?') & (data[2] == 'x') & (data[3] == 'm') & (data[4] == 'l') && PUGI__IS_CHARTYPE(data[5], ct_space)))
                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1941:57: style: inconclusive: Boolean expression 'data[2]=='x'' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
  if (size < 6 || !((data[0] == '<') & (data[1] == '?') & (data[2] == 'x') & (data[3] == 'm') & (data[4] == 'l') && PUGI__IS_CHARTYPE(data[5], ct_space)))
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1941:76: style: inconclusive: Boolean expression 'data[3]=='m'' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
  if (size < 6 || !((data[0] == '<') & (data[1] == '?') & (data[2] == 'x') & (data[3] == 'm') & (data[4] == 'l') && PUGI__IS_CHARTYPE(data[5], ct_space)))
                                                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1941:95: style: inconclusive: Boolean expression 'data[4]=='l'' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
  if (size < 6 || !((data[0] == '<') & (data[1] == '?') & (data[2] == 'x') & (data[3] == 'm') & (data[4] == 'l') && PUGI__IS_CHARTYPE(data[5], ct_space)))
                                                                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10097:37: style: inconclusive: Boolean expression 'step_push(ns,a,n,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, a, n, alloc) & once)
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10106:34: style: inconclusive: Boolean expression 'step_push(ns,c,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, c, alloc) & once)
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10116:34: style: inconclusive: Boolean expression 'step_push(ns,n,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, n, alloc) & once)
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10123:36: style: inconclusive: Boolean expression 'step_push(ns,cur,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, cur, alloc) & once)
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10147:34: style: inconclusive: Boolean expression 'step_push(ns,c,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, c, alloc) & once)
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10156:34: style: inconclusive: Boolean expression 'step_push(ns,c,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, c, alloc) & once)
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10178:36: style: inconclusive: Boolean expression 'step_push(ns,cur,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, cur, alloc) & once)
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10220:37: style: inconclusive: Boolean expression 'step_push(ns,cur,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
      if (step_push(ns, cur, alloc) & once)
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10230:39: style: inconclusive: Boolean expression 'step_push(ns,cur,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
        if (step_push(ns, cur, alloc) & once)
                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10245:34: style: inconclusive: Boolean expression 'step_push(ns,n,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, n, alloc) & once)
                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10252:36: style: inconclusive: Boolean expression 'step_push(ns,cur,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, cur, alloc) & once)
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10291:37: style: inconclusive: Boolean expression 'step_push(ns,a,p,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, a, p, alloc) & once)
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10298:36: style: inconclusive: Boolean expression 'step_push(ns,cur,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, cur, alloc) & once)
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10336:36: style: inconclusive: Boolean expression 'step_push(ns,cur,alloc)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     if (step_push(ns, cur, alloc) & once)
                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8793:3: warning: Member variable 'xpath_variable_boolean::name' is not initialized in the constructor. [uninitMemberVar]
  xpath_variable_boolean(): xpath_variable(xpath_type_boolean), value(false)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8803:3: warning: Member variable 'xpath_variable_number::name' is not initialized in the constructor. [uninitMemberVar]
  xpath_variable_number(): xpath_variable(xpath_type_number), value(0)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8813:3: warning: Member variable 'xpath_variable_string::name' is not initialized in the constructor. [uninitMemberVar]
  xpath_variable_string(): xpath_variable(xpath_type_string), value(0)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8828:3: warning: Member variable 'xpath_variable_node_set::name' is not initialized in the constructor. [uninitMemberVar]
  xpath_variable_node_set(): xpath_variable(xpath_type_node_set)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12226:3: warning: Member variable 'xpath_parser::_scratch' is not initialized in the constructor. [uninitMemberVar]
  xpath_parser(const char_t* query, xpath_variable_set* variables, xpath_allocator* alloc, xpath_parse_result* result): _alloc(alloc), _lexer(query), _query(query), _variables(variables), _result(result), _depth(0)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7921:19: style: inconclusive: Member variable 'xpath_stack_data::result' uses an uninitialized argument 'oom' due to the order of declarations. [initializerList]
  xpath_allocator result;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7926:23: note: Member variable 'xpath_stack_data::result' uses an uninitialized argument 'oom' due to the order of declarations.
  xpath_stack_data(): result(blocks + 0, &oom), temp(blocks + 1, &oom), oom(false)
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7921:19: note: Member variable 'xpath_stack_data::result' uses an uninitialized argument 'oom' due to the order of declarations.
  xpath_allocator result;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7922:19: style: inconclusive: Member variable 'xpath_stack_data::temp' uses an uninitialized argument 'oom' due to the order of declarations. [initializerList]
  xpath_allocator temp;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7926:49: note: Member variable 'xpath_stack_data::temp' uses an uninitialized argument 'oom' due to the order of declarations.
  xpath_stack_data(): result(blocks + 0, &oom), temp(blocks + 1, &oom), oom(false)
                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7922:19: note: Member variable 'xpath_stack_data::temp' uses an uninitialized argument 'oom' due to the order of declarations.
  xpath_allocator temp;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12278:19: style: inconclusive: Member variable 'xpath_query_impl::alloc' uses an uninitialized argument 'block' due to the order of declarations. [initializerList]
  xpath_allocator alloc;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12271:32: note: Member variable 'xpath_query_impl::alloc' uses an uninitialized argument 'block' due to the order of declarations.
  xpath_query_impl(): root(0), alloc(&block, &oom), oom(false)
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12278:19: note: Member variable 'xpath_query_impl::alloc' uses an uninitialized argument 'block' due to the order of declarations.
  xpath_allocator alloc;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12278:19: style: inconclusive: Member variable 'xpath_query_impl::alloc' uses an uninitialized argument 'oom' due to the order of declarations. [initializerList]
  xpath_allocator alloc;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12271:32: note: Member variable 'xpath_query_impl::alloc' uses an uninitialized argument 'oom' due to the order of declarations.
  xpath_query_impl(): root(0), alloc(&block, &oom), oom(false)
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12278:19: note: Member variable 'xpath_query_impl::alloc' uses an uninitialized argument 'oom' due to the order of declarations.
  xpath_allocator alloc;
                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12866:3: performance: Variable '_result' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  _result = rhs._result;
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7881:8: style: inconclusive: Technically the member function 'pugi::impl::::xpath_allocator::release' can be const. [functionConst]
  void release()
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:9963:8: style: inconclusive: Technically the member function 'pugi::impl::::xpath_ast_node::apply_predicates' can be const. [functionConst]
  void apply_predicates(xpath_node_set_raw& ns, size_t first, const xpath_stack& stack, nodeset_eval_t eval)
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:9973:8: style: inconclusive: Technically the member function 'pugi::impl::::xpath_ast_node::step_push' can be const. [functionConst]
  bool step_push(xpath_node_set_raw& ns, xml_attribute_struct* a, xml_node_struct* parent, xpath_allocator* alloc)
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10013:8: style: inconclusive: Technically the member function 'pugi::impl::::xpath_ast_node::step_push' can be const. [functionConst]
  bool step_push(xpath_node_set_raw& ns, xml_node_struct* n, xpath_allocator* alloc)
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:11517:10: performance: inconclusive: Technically the member function 'pugi::impl::::xpath_parser::parse_axis_name' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  axis_t parse_axis_name(const xpath_lexer_string& name, bool& specified)
         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:11585:14: performance: inconclusive: Technically the member function 'pugi::impl::::xpath_parser::parse_node_test_type' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  nodetest_t parse_node_test_type(const xpath_lexer_string& name)
             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:512:3: style: Struct 'xml_allocator' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_allocator(xml_memory_page* root): _root(root), _busy_size(root->busy_size)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1099:3: style: Struct 'xml_attribute_struct' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_attribute_struct(impl::xml_memory_page* page): name(0), value(0), prev_attribute_c(0), next_attribute(0)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1146:3: style: Struct 'xml_document_struct' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_document_struct(xml_memory_page* page): xml_node_struct(page, node_document), xml_allocator(page), buffer(0), extra_buffers(0)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2935:3: style: Struct 'xml_parser' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_parser(xml_allocator* alloc_): alloc(alloc_), error_offset(0), error_status(status_ok)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5081:3: style: Struct 'name_null_sentry' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  name_null_sentry(xml_node_struct* node_): node(node_), name(node_->name)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7774:3: style: Struct 'xpath_allocator' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xpath_allocator(xpath_memory_block* root, bool* error = 0): _root(root), _root_size(0), _error(error)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7899:3: style: Struct 'xpath_allocator_capture' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xpath_allocator_capture(xpath_allocator* alloc): _target(alloc), _state(*alloc)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8612:3: style: Struct 'namespace_uri_predicate' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  namespace_uri_predicate(const char_t* name)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1417:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return 0;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1417:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return 0;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1417:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return 0;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1429:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return 0;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1429:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return 0;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1429:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return 0;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1922:49: style: Return value '*reinterpret_cast<unsigned char*>(&ui)==1' is always true [knownConditionTrueFalse]
  return *reinterpret_cast<unsigned char*>(&ui) == 1;
                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1922:49: note: Return value '*reinterpret_cast<unsigned char*>(&ui)==1' is always true
  return *reinterpret_cast<unsigned char*>(&ui) == 1;
                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1930:27: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
   return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1930:27: note: Calling function 'is_little_endian' returns 1
   return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1930:27: note: Condition 'is_little_endian()' is always true
   return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1932:27: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
   return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1932:27: note: Calling function 'is_little_endian' returns 1
   return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1932:27: note: Condition 'is_little_endian()' is always true
   return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2043:58: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
  if (encoding == encoding_utf16) return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2043:58: note: Calling function 'is_little_endian' returns 1
  if (encoding == encoding_utf16) return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2043:58: note: Condition 'is_little_endian()' is always true
  if (encoding == encoding_utf16) return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2046:58: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
  if (encoding == encoding_utf32) return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2046:58: note: Calling function 'is_little_endian' returns 1
  if (encoding == encoding_utf32) return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2046:58: note: Condition 'is_little_endian()' is always true
  if (encoding == encoding_utf32) return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2271:51: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
   xml_encoding native_encoding = is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2271:51: note: Calling function 'is_little_endian' returns 1
   xml_encoding native_encoding = is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2271:51: note: Condition 'is_little_endian()' is always true
   xml_encoding native_encoding = is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2281:51: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
   xml_encoding native_encoding = is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2281:51: note: Calling function 'is_little_endian' returns 1
   xml_encoding native_encoding = is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2281:51: note: Condition 'is_little_endian()' is always true
   xml_encoding native_encoding = is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2400:8: style: Condition '!alloc->reserve()' is always false [knownConditionTrueFalse]
   if (!alloc->reserve()) return false;
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2400:23: note: Calling function 'reserve' returns 1
   if (!alloc->reserve()) return false;
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2400:8: note: Condition '!alloc->reserve()' is always false
   if (!alloc->reserve()) return false;
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3586:58: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
  if (encoding == encoding_utf16) return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3586:58: note: Calling function 'is_little_endian' returns 1
  if (encoding == encoding_utf16) return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3586:58: note: Condition 'is_little_endian()' is always true
  if (encoding == encoding_utf16) return is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3589:58: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
  if (encoding == encoding_utf32) return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3589:58: note: Calling function 'is_little_endian' returns 1
  if (encoding == encoding_utf32) return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3589:58: note: Condition 'is_little_endian()' is always true
  if (encoding == encoding_utf32) return is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3689:51: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
   xml_encoding native_encoding = is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3689:51: note: Calling function 'is_little_endian' returns 1
   xml_encoding native_encoding = is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3689:51: note: Condition 'is_little_endian()' is always true
   xml_encoding native_encoding = is_little_endian() ? encoding_utf16_le : encoding_utf16_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3696:51: style: Condition 'is_little_endian()' is always true [knownConditionTrueFalse]
   xml_encoding native_encoding = is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1920:21: note: Assignment 'ui=1', assigned value is 1
  unsigned int ui = 1;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3696:51: note: Calling function 'is_little_endian' returns 1
   xml_encoding native_encoding = is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3696:51: note: Condition 'is_little_endian()' is always true
   xml_encoding native_encoding = is_little_endian() ? encoding_utf32_le : encoding_utf32_be;
                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5797:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5797:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5797:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5814:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5814:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5814:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5832:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5832:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5832:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5850:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5850:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5850:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5868:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5868:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5868:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5885:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5885:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5885:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5903:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5903:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5903:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5921:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5921:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_attribute();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5921:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_attribute();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5937:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5937:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5937:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5954:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5954:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5954:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5972:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5972:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5972:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5990:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5990:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5990:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6044:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6044:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6044:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6061:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6061:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6061:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6079:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6079:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6079:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6097:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6097:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6097:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6113:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6113:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6113:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6129:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6129:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6129:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6147:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6147:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6147:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6165:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6165:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return xml_node();
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6165:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return xml_node();
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6187:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6187:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return false;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6187:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6200:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6200:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return false;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6200:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6226:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6226:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return false;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6226:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6239:7: style: Condition '!alloc.reserve()' is always false [knownConditionTrueFalse]
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6239:21: note: Calling function 'reserve' returns 1
  if (!alloc.reserve()) return false;
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6239:7: note: Condition '!alloc.reserve()' is always false
  if (!alloc.reserve()) return false;
      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8342:15: style: Same expression on both sides of '/'. [duplicateExpression]
  return zero / zero;
              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3169:11: style: The scope of the variable 'ch' can be reduced. [variableScope]
   char_t ch = 0;
          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5095:50: style: inconclusive: Function 'xml_writer_file' argument 1 names different: declaration 'file' definition 'file_'. [funcArgNamesDifferent]
 PUGI__FN xml_writer_file::xml_writer_file(void* file_): file(file_)
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:338:25: note: Function 'xml_writer_file' argument 1 names different: declaration 'file' definition 'file_'.
  xml_writer_file(void* file);
                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5095:50: note: Function 'xml_writer_file' argument 1 names different: declaration 'file' definition 'file_'.
 PUGI__FN xml_writer_file::xml_writer_file(void* file_): file(file_)
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5527:86: style: inconclusive: Function 'children' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_object_range<xml_named_node_iterator> xml_node::children(const char_t* name_) const
                                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:715:68: note: Function 'children' argument 1 names different: declaration 'name' definition 'name_'.
  xml_object_range<xml_named_node_iterator> children(const char_t* name) const;
                                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5527:86: note: Function 'children' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_object_range<xml_named_node_iterator> xml_node::children(const char_t* name_) const
                                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5591:50: style: inconclusive: Function 'child' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::child(const char_t* name_) const
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:540:32: note: Function 'child' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node child(const char_t* name) const;
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5591:50: note: Function 'child' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::child(const char_t* name_) const
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5605:59: style: inconclusive: Function 'attribute' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_attribute xml_node::attribute(const char_t* name_) const
                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:541:41: note: Function 'attribute' argument 1 names different: declaration 'name' definition 'name_'.
  xml_attribute attribute(const char_t* name) const;
                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5605:59: note: Function 'attribute' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_attribute xml_node::attribute(const char_t* name_) const
                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5619:57: style: inconclusive: Function 'next_sibling' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::next_sibling(const char_t* name_) const
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:542:39: note: Function 'next_sibling' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node next_sibling(const char_t* name) const;
                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5619:57: note: Function 'next_sibling' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::next_sibling(const char_t* name_) const
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5638:61: style: inconclusive: Function 'previous_sibling' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::previous_sibling(const char_t* name_) const
                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:543:43: note: Function 'previous_sibling' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node previous_sibling(const char_t* name) const;
                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5638:61: note: Function 'previous_sibling' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::previous_sibling(const char_t* name_) const
                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5652:59: style: inconclusive: Function 'attribute' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_attribute xml_node::attribute(const char_t* name_, xml_attribute& hint_) const
                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:546:41: note: Function 'attribute' argument 1 names different: declaration 'name' definition 'name_'.
  xml_attribute attribute(const char_t* name, xml_attribute& hint) const;
                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5652:59: note: Function 'attribute' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_attribute xml_node::attribute(const char_t* name_, xml_attribute& hint_) const
                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5652:81: style: inconclusive: Function 'attribute' argument 2 names different: declaration 'hint' definition 'hint_'. [funcArgNamesDifferent]
 PUGI__FN xml_attribute xml_node::attribute(const char_t* name_, xml_attribute& hint_) const
                                                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:546:62: note: Function 'attribute' argument 2 names different: declaration 'hint' definition 'hint_'.
  xml_attribute attribute(const char_t* name, xml_attribute& hint) const;
                                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5652:81: note: Function 'attribute' argument 2 names different: declaration 'hint' definition 'hint_'.
 PUGI__FN xml_attribute xml_node::attribute(const char_t* name_, xml_attribute& hint_) const
                                                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5731:61: style: inconclusive: Function 'child_value' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN const char_t* xml_node::child_value(const char_t* name_) const
                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:552:43: note: Function 'child_value' argument 1 names different: declaration 'name' definition 'name_'.
  const char_t* child_value(const char_t* name) const;
                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5731:61: note: Function 'child_value' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN const char_t* xml_node::child_value(const char_t* name_) const
                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5792:66: style: inconclusive: Function 'append_attribute' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_attribute xml_node::append_attribute(const char_t* name_)
                                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:560:48: note: Function 'append_attribute' argument 1 names different: declaration 'name' definition 'name_'.
  xml_attribute append_attribute(const char_t* name);
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5792:66: note: Function 'append_attribute' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_attribute xml_node::append_attribute(const char_t* name_)
                                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5809:67: style: inconclusive: Function 'prepend_attribute' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_attribute xml_node::prepend_attribute(const char_t* name_)
                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:561:49: note: Function 'prepend_attribute' argument 1 names different: declaration 'name' definition 'name_'.
  xml_attribute prepend_attribute(const char_t* name);
                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5809:67: note: Function 'prepend_attribute' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_attribute xml_node::prepend_attribute(const char_t* name_)
                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5826:72: style: inconclusive: Function 'insert_attribute_after' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_attribute xml_node::insert_attribute_after(const char_t* name_, const xml_attribute& attr)
                                                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:562:54: note: Function 'insert_attribute_after' argument 1 names different: declaration 'name' definition 'name_'.
  xml_attribute insert_attribute_after(const char_t* name, const xml_attribute& attr);
                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5826:72: note: Function 'insert_attribute_after' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_attribute xml_node::insert_attribute_after(const char_t* name_, const xml_attribute& attr)
                                                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5844:73: style: inconclusive: Function 'insert_attribute_before' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_attribute xml_node::insert_attribute_before(const char_t* name_, const xml_attribute& attr)
                                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:563:55: note: Function 'insert_attribute_before' argument 1 names different: declaration 'name' definition 'name_'.
  xml_attribute insert_attribute_before(const char_t* name, const xml_attribute& attr);
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5844:73: note: Function 'insert_attribute_before' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_attribute xml_node::insert_attribute_before(const char_t* name_, const xml_attribute& attr)
                                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5932:57: style: inconclusive: Function 'append_child' argument 1 names different: declaration 'type' definition 'type_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::append_child(xml_node_type type_)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:572:39: note: Function 'append_child' argument 1 names different: declaration 'type' definition 'type_'.
  xml_node append_child(xml_node_type type = node_element);
                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5932:57: note: Function 'append_child' argument 1 names different: declaration 'type' definition 'type_'.
 PUGI__FN xml_node xml_node::append_child(xml_node_type type_)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5949:58: style: inconclusive: Function 'prepend_child' argument 1 names different: declaration 'type' definition 'type_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::prepend_child(xml_node_type type_)
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:573:40: note: Function 'prepend_child' argument 1 names different: declaration 'type' definition 'type_'.
  xml_node prepend_child(xml_node_type type = node_element);
                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5949:58: note: Function 'prepend_child' argument 1 names different: declaration 'type' definition 'type_'.
 PUGI__FN xml_node xml_node::prepend_child(xml_node_type type_)
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5966:64: style: inconclusive: Function 'insert_child_before' argument 1 names different: declaration 'type' definition 'type_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::insert_child_before(xml_node_type type_, const xml_node& node)
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:575:46: note: Function 'insert_child_before' argument 1 names different: declaration 'type' definition 'type_'.
  xml_node insert_child_before(xml_node_type type, const xml_node& node);
                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5966:64: note: Function 'insert_child_before' argument 1 names different: declaration 'type' definition 'type_'.
 PUGI__FN xml_node xml_node::insert_child_before(xml_node_type type_, const xml_node& node)
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5984:63: style: inconclusive: Function 'insert_child_after' argument 1 names different: declaration 'type' definition 'type_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::insert_child_after(xml_node_type type_, const xml_node& node)
                                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:574:45: note: Function 'insert_child_after' argument 1 names different: declaration 'type' definition 'type_'.
  xml_node insert_child_after(xml_node_type type, const xml_node& node);
                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5984:63: note: Function 'insert_child_after' argument 1 names different: declaration 'type' definition 'type_'.
 PUGI__FN xml_node xml_node::insert_child_after(xml_node_type type_, const xml_node& node)
                                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6002:57: style: inconclusive: Function 'append_child' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::append_child(const char_t* name_)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:578:39: note: Function 'append_child' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node append_child(const char_t* name);
                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6002:57: note: Function 'append_child' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::append_child(const char_t* name_)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6011:58: style: inconclusive: Function 'prepend_child' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::prepend_child(const char_t* name_)
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:579:40: note: Function 'prepend_child' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node prepend_child(const char_t* name);
                                       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6011:58: note: Function 'prepend_child' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::prepend_child(const char_t* name_)
                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6020:63: style: inconclusive: Function 'insert_child_after' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::insert_child_after(const char_t* name_, const xml_node& node)
                                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:580:45: note: Function 'insert_child_after' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node insert_child_after(const char_t* name, const xml_node& node);
                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6020:63: note: Function 'insert_child_after' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::insert_child_after(const char_t* name_, const xml_node& node)
                                                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6029:64: style: inconclusive: Function 'insert_child_before' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::insert_child_before(const char_t* name_, const xml_node& node)
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:581:46: note: Function 'insert_child_before' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node insert_child_before(const char_t* name, const xml_node& node);
                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6029:64: note: Function 'insert_child_before' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::insert_child_before(const char_t* name_, const xml_node& node)
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6176:57: style: inconclusive: Function 'remove_attribute' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN bool xml_node::remove_attribute(const char_t* name_)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:597:39: note: Function 'remove_attribute' argument 1 names different: declaration 'name' definition 'name_'.
  bool remove_attribute(const char_t* name);
                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6176:57: note: Function 'remove_attribute' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN bool xml_node::remove_attribute(const char_t* name_)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6216:53: style: inconclusive: Function 'remove_child' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN bool xml_node::remove_child(const char_t* name_)
                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:604:35: note: Function 'remove_child' argument 1 names different: declaration 'name' definition 'name_'.
  bool remove_child(const char_t* name);
                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6216:53: note: Function 'remove_child' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN bool xml_node::remove_child(const char_t* name_)
                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6290:68: style: inconclusive: Function 'find_child_by_attribute' argument 1 names different: declaration 'name' definition 'name_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::find_child_by_attribute(const char_t* name_, const char_t* attr_name, const char_t* attr_value) const
                                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:663:50: note: Function 'find_child_by_attribute' argument 1 names different: declaration 'name' definition 'name_'.
  xml_node find_child_by_attribute(const char_t* name, const char_t* attr_name, const char_t* attr_value) const;
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6290:68: note: Function 'find_child_by_attribute' argument 1 names different: declaration 'name' definition 'name_'.
 PUGI__FN xml_node xml_node::find_child_by_attribute(const char_t* name_, const char_t* attr_name, const char_t* attr_value) const
                                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6372:66: style: inconclusive: Function 'first_element_by_path' argument 1 names different: declaration 'path' definition 'path_'. [funcArgNamesDifferent]
 PUGI__FN xml_node xml_node::first_element_by_path(const char_t* path_, char_t delimiter) const
                                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:672:48: note: Function 'first_element_by_path' argument 1 names different: declaration 'path' definition 'path_'.
  xml_node first_element_by_path(const char_t* path, char_t delimiter = '/') const;
                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6372:66: note: Function 'first_element_by_path' argument 1 names different: declaration 'path' definition 'path_'.
 PUGI__FN xml_node xml_node::first_element_by_path(const char_t* path_, char_t delimiter) const
                                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6482:83: style: inconclusive: Function 'print' argument 1 names different: declaration 'os' definition 'stream'. [funcArgNamesDifferent]
 PUGI__FN void xml_node::print(std::basic_ostream<char, std::char_traits<char> >& stream, const char_t* indent, unsigned int flags, xml_encoding encoding, unsigned int depth) const
                                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:697:65: note: Function 'print' argument 1 names different: declaration 'os' definition 'stream'.
  void print(std::basic_ostream<char, std::char_traits<char> >& os, const char_t* indent = PUGIXML_TEXT("\t"), unsigned int flags = format_default, xml_encoding encoding = encoding_auto, unsigned int depth = 0) const;
                                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6482:83: note: Function 'print' argument 1 names different: declaration 'os' definition 'stream'.
 PUGI__FN void xml_node::print(std::basic_ostream<char, std::char_traits<char> >& stream, const char_t* indent, unsigned int flags, xml_encoding encoding, unsigned int depth) const
                                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6489:89: style: inconclusive: Function 'print' argument 1 names different: declaration 'os' definition 'stream'. [funcArgNamesDifferent]
 PUGI__FN void xml_node::print(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream, const char_t* indent, unsigned int flags, unsigned int depth) const
                                                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:698:71: note: Function 'print' argument 1 names different: declaration 'os' definition 'stream'.
  void print(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& os, const char_t* indent = PUGIXML_TEXT("\t"), unsigned int flags = format_default, unsigned int depth = 0) const;
                                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6489:89: note: Function 'print' argument 1 names different: declaration 'os' definition 'stream'.
 PUGI__FN void xml_node::print(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream, const char_t* indent, unsigned int flags, unsigned int depth) const
                                                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7336:64: style: inconclusive: Function 'load_file' argument 1 names different: declaration 'path' definition 'path_'. [funcArgNamesDifferent]
 PUGI__FN xml_parse_result xml_document::load_file(const char* path_, unsigned int options, xml_encoding encoding)
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1076:42: note: Function 'load_file' argument 1 names different: declaration 'path' definition 'path_'.
  xml_parse_result load_file(const char* path, unsigned int options = parse_default, xml_encoding encoding = encoding_auto);
                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7336:64: note: Function 'load_file' argument 1 names different: declaration 'path' definition 'path_'.
 PUGI__FN xml_parse_result xml_document::load_file(const char* path_, unsigned int options, xml_encoding encoding)
                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7346:67: style: inconclusive: Function 'load_file' argument 1 names different: declaration 'path' definition 'path_'. [funcArgNamesDifferent]
 PUGI__FN xml_parse_result xml_document::load_file(const wchar_t* path_, unsigned int options, xml_encoding encoding)
                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1077:45: note: Function 'load_file' argument 1 names different: declaration 'path' definition 'path_'.
  xml_parse_result load_file(const wchar_t* path, unsigned int options = parse_default, xml_encoding encoding = encoding_auto);
                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7346:67: note: Function 'load_file' argument 1 names different: declaration 'path' definition 'path_'.
 PUGI__FN xml_parse_result xml_document::load_file(const wchar_t* path_, unsigned int options, xml_encoding encoding)
                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7421:52: style: inconclusive: Function 'save_file' argument 1 names different: declaration 'path' definition 'path_'. [funcArgNamesDifferent]
 PUGI__FN bool xml_document::save_file(const char* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const
                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1100:30: note: Function 'save_file' argument 1 names different: declaration 'path' definition 'path_'.
  bool save_file(const char* path, const char_t* indent = PUGIXML_TEXT("\t"), unsigned int flags = format_default, xml_encoding encoding = encoding_auto) const;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7421:52: note: Function 'save_file' argument 1 names different: declaration 'path' definition 'path_'.
 PUGI__FN bool xml_document::save_file(const char* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const
                                                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7429:55: style: inconclusive: Function 'save_file' argument 1 names different: declaration 'path' definition 'path_'. [funcArgNamesDifferent]
 PUGI__FN bool xml_document::save_file(const wchar_t* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1101:33: note: Function 'save_file' argument 1 names different: declaration 'path' definition 'path_'.
  bool save_file(const wchar_t* path, const char_t* indent = PUGIXML_TEXT("\t"), unsigned int flags = format_default, xml_encoding encoding = encoding_auto) const;
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7429:55: note: Function 'save_file' argument 1 names different: declaration 'path' definition 'path_'.
 PUGI__FN bool xml_document::save_file(const wchar_t* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12306:70: style: inconclusive: Function 'xpath_exception' argument 1 names different: declaration 'result' definition 'result_'. [funcArgNamesDifferent]
 PUGI__FN xpath_exception::xpath_exception(const xpath_parse_result& result_): _result(result_)
                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1304:54: note: Function 'xpath_exception' argument 1 names different: declaration 'result' definition 'result_'.
  explicit xpath_exception(const xpath_parse_result& result);
                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12306:70: note: Function 'xpath_exception' argument 1 names different: declaration 'result' definition 'result_'.
 PUGI__FN xpath_exception::xpath_exception(const xpath_parse_result& result_): _result(result_)
                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12326:50: style: inconclusive: Function 'xpath_node' argument 1 names different: declaration 'node' definition 'node_'. [funcArgNamesDifferent]
 PUGI__FN xpath_node::xpath_node(const xml_node& node_): _node(node_)
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1331:30: note: Function 'xpath_node' argument 1 names different: declaration 'node' definition 'node_'.
  xpath_node(const xml_node& node);
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12326:50: note: Function 'xpath_node' argument 1 names different: declaration 'node' definition 'node_'.
 PUGI__FN xpath_node::xpath_node(const xml_node& node_): _node(node_)
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12330:55: style: inconclusive: Function 'xpath_node' argument 1 names different: declaration 'attribute' definition 'attribute_'. [funcArgNamesDifferent]
 PUGI__FN xpath_node::xpath_node(const xml_attribute& attribute_, const xml_node& parent_): _node(attribute_ ? parent_ : xml_node()), _attribute(attribute_)
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1332:35: note: Function 'xpath_node' argument 1 names different: declaration 'attribute' definition 'attribute_'.
  xpath_node(const xml_attribute& attribute, const xml_node& parent);
                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12330:55: note: Function 'xpath_node' argument 1 names different: declaration 'attribute' definition 'attribute_'.
 PUGI__FN xpath_node::xpath_node(const xml_attribute& attribute_, const xml_node& parent_): _node(attribute_ ? parent_ : xml_node()), _attribute(attribute_)
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12330:83: style: inconclusive: Function 'xpath_node' argument 2 names different: declaration 'parent' definition 'parent_'. [funcArgNamesDifferent]
 PUGI__FN xpath_node::xpath_node(const xml_attribute& attribute_, const xml_node& parent_): _node(attribute_ ? parent_ : xml_node()), _attribute(attribute_)
                                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1332:62: note: Function 'xpath_node' argument 2 names different: declaration 'parent' definition 'parent_'.
  xpath_node(const xml_attribute& attribute, const xml_node& parent);
                                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12330:83: note: Function 'xpath_node' argument 2 names different: declaration 'parent' definition 'parent_'.
 PUGI__FN xpath_node::xpath_node(const xml_attribute& attribute_, const xml_node& parent_): _node(attribute_ ? parent_ : xml_node()), _attribute(attribute_)
                                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12385:55: style: inconclusive: Function '_assign' argument 1 names different: declaration 'begin' definition 'begin_'. [funcArgNamesDifferent]
 PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_, type_t type_)
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1425:31: note: Function '_assign' argument 1 names different: declaration 'begin' definition 'begin_'.
  void _assign(const_iterator begin, const_iterator end, type_t type);
                              ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12385:55: note: Function '_assign' argument 1 names different: declaration 'begin' definition 'begin_'.
 PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_, type_t type_)
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12385:78: style: inconclusive: Function '_assign' argument 2 names different: declaration 'end' definition 'end_'. [funcArgNamesDifferent]
 PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_, type_t type_)
                                                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1425:53: note: Function '_assign' argument 2 names different: declaration 'end' definition 'end_'.
  void _assign(const_iterator begin, const_iterator end, type_t type);
                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12385:78: note: Function '_assign' argument 2 names different: declaration 'end' definition 'end_'.
 PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_, type_t type_)
                                                                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12385:91: style: inconclusive: Function '_assign' argument 3 names different: declaration 'type' definition 'type_'. [funcArgNamesDifferent]
 PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_, type_t type_)
                                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1425:65: note: Function '_assign' argument 3 names different: declaration 'type' definition 'type_'.
  void _assign(const_iterator begin, const_iterator end, type_t type);
                                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12385:91: note: Function '_assign' argument 3 names different: declaration 'type' definition 'type_'.
 PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_, type_t type_)
                                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12434:57: style: inconclusive: Function 'xpath_node_set' argument 1 names different: declaration 'begin' definition 'begin_'. [funcArgNamesDifferent]
 PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_unsorted), _begin(_storage), _end(_storage)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1380:33: note: Function 'xpath_node_set' argument 1 names different: declaration 'begin' definition 'begin_'.
  xpath_node_set(const_iterator begin, const_iterator end, type_t type = type_unsorted);
                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12434:57: note: Function 'xpath_node_set' argument 1 names different: declaration 'begin' definition 'begin_'.
 PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_unsorted), _begin(_storage), _end(_storage)
                                                        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12434:80: style: inconclusive: Function 'xpath_node_set' argument 2 names different: declaration 'end' definition 'end_'. [funcArgNamesDifferent]
 PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_unsorted), _begin(_storage), _end(_storage)
                                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1380:55: note: Function 'xpath_node_set' argument 2 names different: declaration 'end' definition 'end_'.
  xpath_node_set(const_iterator begin, const_iterator end, type_t type = type_unsorted);
                                                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12434:80: note: Function 'xpath_node_set' argument 2 names different: declaration 'end' definition 'end_'.
 PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_unsorted), _begin(_storage), _end(_storage)
                                                                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12434:93: style: inconclusive: Function 'xpath_node_set' argument 3 names different: declaration 'type' definition 'type_'. [funcArgNamesDifferent]
 PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_unsorted), _begin(_storage), _end(_storage)
                                                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1380:67: note: Function 'xpath_node_set' argument 3 names different: declaration 'type' definition 'type_'.
  xpath_node_set(const_iterator begin, const_iterator end, type_t type = type_unsorted);
                                                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12434:93: note: Function 'xpath_node_set' argument 3 names different: declaration 'type' definition 'type_'.
 PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_unsorted), _begin(_storage), _end(_storage)
                                                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12533:59: style: inconclusive: Function 'xpath_variable' argument 1 names different: declaration 'type' definition 'type_'. [funcArgNamesDifferent]
 PUGI__FN xpath_variable::xpath_variable(xpath_value_type type_): _type(type_), _next(0)
                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:1146:35: note: Function 'xpath_variable' argument 1 names different: declaration 'type' definition 'type_'.
  xpath_variable(xpath_value_type type);
                                  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12533:59: note: Function 'xpath_variable' argument 1 names different: declaration 'type' definition 'type_'.
 PUGI__FN xpath_variable::xpath_variable(xpath_value_type type_): _type(type_), _next(0)
                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5222:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5222:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5229:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5229:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5236:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5236:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5243:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5243:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5250:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5250:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5257:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5257:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5265:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5265:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5272:17: style: Local variable 'value' shadows outer function [shadowFunction]
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:400:17: note: Shadowed declaration
  const char_t* value() const;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5272:17: note: Shadow variable
  const char_t* value = _attr->value;
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6501:30: style: Variable 'doc' can be declared as reference to const [constVariableReference]
  impl::xml_document_struct& doc = impl::get_document(_root);
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12103:42: style: Parameter 'lexer' can be declared as reference to const [constParameterReference]
   static binary_op_t parse(xpath_lexer& lexer)
                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:596:32: style: Parameter 'ptr' can be declared as pointer to const [constParameterPointer]
  void deallocate_memory(void* ptr, size_t size, xml_memory_page* page)
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2307:12: style: Variable 'end' can be declared as pointer to const [constVariablePointer]
  uint8_t* end = wchar_decoder::process(str, length, begin, utf8_writer());
           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:2356:102: style: Parameter 'target' can be declared as pointer to const [constParameterPointer]
 inline bool strcpy_insitu_allow(size_t length, const Header& header, uintptr_t header_mask, char_t* target)
                                                                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4359:54: style: Parameter 'attr' can be declared as pointer to const [constParameterPointer]
 PUGI__FN bool is_attribute_of(xml_attribute_struct* attr, xml_node_struct* node)
                                                     ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4407:140: style: Parameter 'alloc' can be declared as pointer to const [constParameterPointer]
 PUGI__FN void node_copy_string(String& dest, Header& header, uintptr_t header_mask, char_t* source, Header& source_header, xml_allocator* alloc)
                                                                                                                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4506:44: style: Parameter 'node' can be declared as pointer to const [constParameterPointer]
 inline bool is_text_node(xml_node_struct* node)
                                           ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4645:106: style: Parameter 'end' can be declared as pointer to const [constParameterPointer]
 template <typename U> PUGI__FN PUGI__UNSIGNED_OVERFLOW char_t* integer_to_string(char_t* begin, char_t* end, U value, bool negative)
                                                                                                         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4667:91: style: Parameter 'buf' can be declared as pointer to const [constParameterPointer]
 PUGI__FN bool set_value_ascii(String& dest, Header& header, uintptr_t header_mask, char* buf)
                                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4687:11: style: Variable 'begin' can be declared as pointer to const [constVariablePointer]
  char_t* begin = integer_to_string(buf, end, value, negative);
          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6592:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6600:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7617:81: style: Parameter 'end' can be declared as pointer to const [constParameterPointer]
 template <typename T, typename Pred> PUGI__FN void insertion_sort(T* begin, T* end, const Pred& pred)
                                                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8239:50: style: Parameter 'parent' can be declared as pointer to const [constParameterPointer]
 PUGI__FN bool node_is_ancestor(xml_node_struct* parent, xml_node_struct* node)
                                                 ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8396:37: style: Parameter 'begin' can be declared as pointer to const [constParameterPointer]
 PUGI__FN void truncate_zeros(char* begin, char* end)
                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10946:13: style: Variable 'end' can be declared as pointer to const [constVariablePointer]
    char_t* end = normalize_space(begin);
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10958:13: style: Variable 'end' can be declared as pointer to const [constVariablePointer]
    char_t* end = normalize_space(begin);
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10976:13: style: Variable 'end' can be declared as pointer to const [constVariablePointer]
    char_t* end = translate(begin, from.c_str(), to.c_str(), to.length());
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10988:13: style: Variable 'end' can be declared as pointer to const [constVariablePointer]
    char_t* end = translate_table(begin, _data.table);
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:199:30: style: struct member 'xml_memory_management_function_storage::allocate' is never used. [unusedStructMember]
  static allocation_function allocate;
                             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:200:32: style: struct member 'xml_memory_management_function_storage::deallocate' is never used. [unusedStructMember]
  static deallocation_function deallocate;
                               ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7764:11: style: struct member 'xpath_memory_block::alignment' is never used. [unusedStructMember]
   double alignment;
          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1977:5: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
    PUGI__SCANCHAR(delimiter);
    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:3169:14: style: Variable 'ch' is assigned a value that is never used. [unreadVariable]
   char_t ch = 0;
             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1054:3: style: Struct 'xml_attribute_struct' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  xml_attribute_struct(impl::xml_memory_page* page): header(page, 0), namevalue_base(0)
  ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:1024:23: style: Variable 'page' can be declared as pointer to const [constVariablePointer]
     xml_memory_page* page = compact_get_page(this, header_offset);
                      ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4091:85: style: Parameter 'node' can be declared as pointer to const [constParameterPointer]
 PUGI__FN void node_output_attributes(xml_buffered_writer& writer, xml_node_struct* node, const char_t* indent, size_t indent_length, unsigned int flags, unsigned int depth)
                                                                                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4346:49: style: Parameter 'node' can be declared as pointer to const [constParameterPointer]
 PUGI__FN bool has_declaration(xml_node_struct* node)
                                                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:4359:77: style: Parameter 'node' can be declared as pointer to const [constParameterPointer]
 PUGI__FN bool is_attribute_of(xml_attribute_struct* attr, xml_node_struct* node)
                                                                            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6608:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6616:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6624:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6632:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6640:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6649:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6657:20: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* d = _data();
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8180:20: style: Variable 'ls' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* ls = ln;
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8181:20: style: Variable 'rs' can be declared as pointer to const [constVariablePointer]
  xml_node_struct* rs = rn;
                   ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:8239:75: style: Parameter 'node' can be declared as pointer to const [constParameterPointer]
 PUGI__FN bool node_is_ancestor(xml_node_struct* parent, xml_node_struct* node)
                                                                          ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7881:8: style: inconclusive: Technically the member function 'pugi::impl::xpath_allocator::release' can be const. [functionConst]
  void release()
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:9963:8: style: inconclusive: Technically the member function 'pugi::impl::xpath_ast_node::apply_predicates' can be const. [functionConst]
  void apply_predicates(xpath_node_set_raw& ns, size_t first, const xpath_stack& stack, nodeset_eval_t eval)
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:9973:8: style: inconclusive: Technically the member function 'pugi::impl::xpath_ast_node::step_push' can be const. [functionConst]
  bool step_push(xpath_node_set_raw& ns, xml_attribute_struct* a, xml_node_struct* parent, xpath_allocator* alloc)
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:10013:8: style: inconclusive: Technically the member function 'pugi::impl::xpath_ast_node::step_push' can be const. [functionConst]
  bool step_push(xpath_node_set_raw& ns, xml_node_struct* n, xpath_allocator* alloc)
       ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:11517:10: performance: inconclusive: Technically the member function 'pugi::impl::xpath_parser::parse_axis_name' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  axis_t parse_axis_name(const xpath_lexer_string& name, bool& specified)
         ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:11585:14: performance: inconclusive: Technically the member function 'pugi::impl::xpath_parser::parse_node_test_type' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  nodetest_t parse_node_test_type(const xpath_lexer_string& name)
             ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\main.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\e2e\profile11_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\e2e\profile11_test.cpp:21:13: error: syntax error [syntaxError]
            TEST(Profile11Test, ValidProtection)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\eventgroup_entry_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\eventgroup_entry_test.cpp:2:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\eventgroup_entry_test.cpp:3:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\eventgroup_entry_test.cpp:36:13: error: syntax error [syntaxError]
            TEST(EventgroupEntryTest, InvalidSubscribeEventFactory)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\service_entry_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\service_entry_test.cpp:2:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\service_entry_test.cpp:3:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\entry\service_entry_test.cpp:34:13: error: syntax error [syntaxError]
            TEST(ServiceEntryTest, OfferServiceFactory)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\helper\concurrent_queue_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\helper\concurrent_queue_test.cpp:16:13: error: syntax error [syntaxError]
            TEST(ConcurrentQueueTest, QueuingScenario)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\helper\ipv4_address_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\helper\ipv4_address_test.cpp:26:13: error: syntax error [syntaxError]
            TEST(Ipv4AddressTest, StringConstructor)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\helper\ttl_timer_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\helper\ttl_timer_test.cpp:18:13: error: syntax error [syntaxError]
            TEST(TtlTimerTest, RequestedProperty)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\ipv4_endpoint_option_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\ipv4_endpoint_option_test.cpp:2:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\ipv4_endpoint_option_test.cpp:3:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\ipv4_endpoint_option_test.cpp:31:13: error: syntax error [syntaxError]
            TEST(Ipv4EndpointOptionTest, MulticastFactory)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\loadbalancing_option_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\loadbalancing_option_test.cpp:2:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\loadbalancing_option_test.cpp:3:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\option\loadbalancing_option_test.cpp:27:13: error: syntax error [syntaxError]
            TEST(LoadBalancingOptionTest, PayloadMethod)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\pubsub\fsm\pubsub_state_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\pubsub\fsm\pubsub_state_test.cpp:27:21: error: syntax error [syntaxError]
                    TEST(PubSubStateTest, NotSubscribedStateConstructor)
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\pubsub\someip_pubsub_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\helper\mockup_network_layer.h:4:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\pubsub\someip_pubsub_test.cpp:46:17: error: syntax error [syntaxError]
                TEST_F(SomeIpPubSubTest, ServerInitialState)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\rpc_client_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\rpc_client_test.cpp:51:17: error: syntax error [syntaxError]
                TEST_F(RpcClientTest, SendMethod)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\rpc_server_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\rpc_server_test.cpp:70:17: error: syntax error [syntaxError]
                TEST_F(RpcServerTest, OkHandle)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\someip_rpc_message_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\someip_rpc_message_test.cpp:2:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\someip_rpc_message_test.cpp:3:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\rpc\someip_rpc_message_test.cpp:36:17: error: syntax error [syntaxError]
                TEST(SomeIpRpcMessageTest, RequestMovePayloadConstructor)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\fsm\machine_state_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\fsm\machine_state_test.cpp:32:21: error: syntax error [syntaxError]
                    TEST(MachineStateTest, InitialWaitStateContructor)
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\network_abstraction_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\network_abstraction_test.cpp:2:0: information: Include file: <asyncbsdsocket/poller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <asyncbsdsocket/poller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\network_abstraction_test.cpp:16:21: error: There is an unknown macro here somewhere. Configuration is required. If EXPECT_NO_THROW is a macro then please configure it. [unknownMacro]
                    EXPECT_NO_THROW(Poller poller;);
                    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\someip_sd_message_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\someip_sd_message_test.cpp:2:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\someip_sd_message_test.cpp:3:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\someip_sd_message_test.cpp:30:17: error: syntax error [syntaxError]
                TEST(SomeIpSdMessageTest, SetInvalidSessionId)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\someip_sd_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\com\someip\sd\someip_sd_test.cpp:76:17: error: syntax error [syntaxError]
                TEST_F(SomeIpSdTest, ServerStart)
                ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\error_code_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\error_code_test.cpp:26:9: error: syntax error [syntaxError]
        TEST(ErrorCodeTest, Constructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\error_domain_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\error_domain_test.cpp:31:9: error: syntax error [syntaxError]
        TEST_F(ErrorDomainTest, Constructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\instance_specifier_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\instance_specifier_test.cpp:16:9: error: syntax error [syntaxError]
        TEST(InstanceSpecifierTest, Factory)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\optional_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\optional_test.cpp:14:9: error: syntax error [syntaxError]
        TEST(OptionalTest, CopyValueConstructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\result_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\result_test.cpp:17:9: error: syntax error [syntaxError]
        TEST(ResultTest, MoveValueConstructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\result_void_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\core\result_void_test.cpp:14:9: error: syntax error [syntaxError]
        TEST(ResultVoidTest, CopyErrorConstructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\cancellation_handler_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\cancellation_handler_test.cpp:28:9: error: syntax error [syntaxError]
        TEST_F(CancellationHandlerTest, Constructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\condition_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\conversation_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\conversation_test.cpp:28:9: error: syntax error [syntaxError]
        TEST_F(ConversationTest, Factory)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\debouncing\counter_based_debouncer_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\debouncing\counter_based_debouncer_test.cpp:26:13: error: syntax error [syntaxError]
            TEST_F(CounterBasedDebouncerTest, PrepassWithoutJumpScenario)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\debouncing\timer_based_debouncer_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\debouncing\timer_based_debouncer_test.cpp:26:13: error: syntax error [syntaxError]
            TEST_F(TimerBasedDebouncerTest, PrepassScenario)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\diag_error_domain_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\diag_error_domain_test.cpp:14:9: error: syntax error [syntaxError]
        TEST(DiagErrorDomainTest, MakeErrorCodeMethod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\doip_lib_test.cpp:1:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\doip_lib_test.cpp:2:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\doip_lib_test.cpp:3:0: information: Include file: <doiplib/doip_controller.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <doiplib/doip_controller.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\dtc_information_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\dtc_information_test.cpp:52:9: error: syntax error [syntaxError]
        TEST_F(DtcInformationTest, Constructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\testable_uds_service.h:4:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\ecu_reset_request_test.cpp:66:9: error: syntax error [syntaxError]
        TEST_F(EcuResetRequestTest, IncorrectRequestScenario)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\event_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\event_test.cpp:28:9: error: syntax error [syntaxError]
        TEST_F(EventTest, Constructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\generic_routine_test.cpp:60:9: error: syntax error [syntaxError]
        TEST_F(GenericRoutineTest, IncorrectRequestScenario)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\generic_uds_service_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\generic_uds_service.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\generic_uds_service_test.cpp:34:9: error: syntax error [syntaxError]
        TEST_F(GenericUdsServiceTest, OfferScenario)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\meta_info_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\meta_info_test.cpp:17:9: error: syntax error [syntaxError]
        TEST(MetaInfoTest, GetValueMethod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\monitor_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\monitor_test.cpp:31:9: error: syntax error [syntaxError]
        TEST(MonitorTest, TimerBasedOfferScenario)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\obd_communication_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\obd_communication_test.cpp:2:0: information: Include file: <obdemulator/can_driver.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <obdemulator/can_driver.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\obd_communication_test.cpp:15:13: error: There is an unknown macro here somewhere. Configuration is required. If EXPECT_NO_THROW is a macro then please configure it. [unknownMacro]
            EXPECT_NO_THROW(CanDriver canDriver(cSpeed, cSupportExtended););
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\operation_cycle_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\operation_cycle_test.cpp:24:9: error: syntax error [syntaxError]
        TEST_F(OperationCycleTest, RestartScenario)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\delay_timer_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\delay_timer_test.cpp:16:13: error: syntax error [syntaxError]
            TEST(DelayTimerTest, StartMethod)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\nrc_exception_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\request_transfer_exit_test.cpp:42:13: error: syntax error [syntaxError]
            TEST_F(RequestTransferExitTest, RequestSequenceErrorScenario)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\request_transfer_test.cpp:46:13: error: syntax error [syntaxError]
            TEST(DummyRequestTransfer, Constructor)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\transfer_data_test.cpp:26:13: error: syntax error [syntaxError]
            TEST_F(TransferDataTest, ValidTransferConfiguration)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\uds_service_router_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\routing\uds_service_router_test.cpp:33:13: error: syntax error [syntaxError]
            TEST(UdsServiceRouterTest, InvalidRouteMethod)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\diag\security_access_test.cpp:66:9: error: syntax error [syntaxError]
        TEST_F(SecurityAccessTest, IncorrectRequestScenario)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\deterministic_client_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\deterministic_client_test.cpp:23:9: error: syntax error [syntaxError]
        TEST(DeterministicClientTest, TimeStamps)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\exec_exception_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\exec_exception_test.cpp:19:9: error: syntax error [syntaxError]
        TEST(ExecExceptionTest, MakeErrorCodeMethod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\execution_client_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\helper\mock_rpc_client.h:4:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\execution_client_test.cpp:36:9: error: syntax error [syntaxError]
        TEST_F(ExecutionClientTest, ReportExecutionStateMethod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\execution_server_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\helper\mock_rpc_server.h:4:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\execution_server_test.cpp:50:9: error: syntax error [syntaxError]
        TEST_F(ExecutionServerTest, TryGetExecutionStateMethod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\function_group_state_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\function_group_state_test.cpp:21:9: error: syntax error [syntaxError]
        TEST(FunctionGroupStateTest, MoveConstructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\function_group_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\function_group_test.cpp:16:9: error: syntax error [syntaxError]
        TEST(FunctionGroupTest, MoveConstructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\helper\atomic_optional_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\helper\atomic_optional_test.cpp:16:13: error: syntax error [syntaxError]
            TEST(AtomicOptionalTest, Constructor)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\helper\modelled_process_test.cpp:1:0: information: Include file: <thread> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <thread>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\helper\modelled_process_test.cpp:2:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\helper\modelled_process_test.cpp:39:13: error: syntax error [syntaxError]
            TEST_F(ModelledProcessTest, InitializeMethod)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\state_client_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\state_client_test.cpp:37:9: error: syntax error [syntaxError]
        TEST_F(StateClientTest, SetStateMethod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\state_server_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\state_server_test.cpp:54:9: error: syntax error [syntaxError]
        TEST(StateServerCtorTest, InvalidArgumentConstruction)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\worker_runnable_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\worker_runnable_test.cpp:17:9: error: syntax error [syntaxError]
        TEST_F(WorkerRunnableTest, RandomNumberAssignment)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\worker_thread_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\exec\worker_thread_test.cpp:19:9: error: syntax error [syntaxError]
        TEST(WorkerThreadTest, MultiInstanceUniqueness)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\argument_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\argument_test.cpp:2:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\argument_test.cpp:3:0: information: Include file: <utility> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <utility>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\log_stream_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\log_stream_test.cpp:35:9: error: syntax error [syntaxError]
        TEST(LogStreamTest, ByteInsertionOperator)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\logger_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\logger_test.cpp:2:0: information: Include file: <initializer_list> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <initializer_list>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\logger_test.cpp:34:9: error: syntax error [syntaxError]
        TEST(LoggerTest, LogLevelVerbose)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\logging_framework_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\log\logging_framework_test.cpp:20:9: error: syntax error [syntaxError]
        TEST(LoggingFrameworkTest, LogMethod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\recovery_action_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\recovery_action_test.cpp:25:9: error: syntax error [syntaxError]
        TEST_F(RecoveryActionTest, Constructor)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervised_entity_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervised_entity_test.cpp:15:9: error: syntax error [syntaxError]
        TEST(SupervisedEntityTest, ReportCheckpointMehod)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\alive_supervision_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\alive_supervision_test.cpp:28:13: error: syntax error [syntaxError]
            TEST(AliveSupervisionTest, BigMinMarginConstruction)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\deadline_supervision_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\deadline_supervision_test.cpp:12:13: error: syntax error [syntaxError]
            TEST(DeadlineSupervisionTest, InvalidMinDeadlineConstruction)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\elementary_supervision_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\elementary_supervision_test.cpp:20:13: error: syntax error [syntaxError]
            TEST(ElementarySupervisionTest, TransitionToOkScenario)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\global_supervision_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\phm\supervisors\global_supervision_test.cpp:21:13: error: syntax error [syntaxError]
            TEST(GlobalSupervisionTest, Constructor)
            ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\power_mode_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\cg\communication_group_server.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\cg\communication_group_server.h:5:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\cg\communication_group_server.h:6:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\cg\communication_group_server.h:7:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\cg\communication_group_client.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\cg\communication_group_client.h:5:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\cg\communication_group_client.h:6:0: information: Include file: <future> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <future>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\power_mode_test.cpp:37:9: error: syntax error [syntaxError]
        TEST_F(PowerModeTest, RequestResponseChain)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_in_test.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_in_test.cpp:2:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\sm\states.h:4:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_in_test.cpp:15:9: error: syntax error [syntaxError]
        TEST(SMTriggerInTest, TriggerWrite)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_inout_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\sm\notifier.h:4:0: information: Include file: <functional> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <functional>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\sm\notifier.h:5:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_inout_test.cpp:37:9: error: syntax error [syntaxError]
        TEST_F(TriggerInOutTest, TriggerChain)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_out_test.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_out_test.cpp:2:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\ara\sm\trigger_out_test.cpp:15:9: error: syntax error [syntaxError]
        TEST(SMTriggerOutTest, NotifierSubscribeAndNotify)
        ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\arxml\arxml_node_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\arxml\arxml_node_test.cpp:24:5: error: syntax error [syntaxError]
    TEST(ArxmlNodeTest, GetByteValueMethod)
    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\arxml\arxml_reader_test.cpp:1:0: information: Include file: <gtest/gtest.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <gtest/gtest.h>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\arxml\arxml_reader_test.cpp:2:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\arxml\arxml_reader_test.cpp:3:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\arxml\arxml_reader_test.cpp:4:0: information: Include file: <array> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <array>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\test\arxml\arxml_reader_test.cpp:17:5: error: syntax error [syntaxError]
    TEST(ArxmlReaderTest, ValidVersionConstruction)
    ^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\diag_message_handler.cpp:18:0: style: The function 'GetMessage' is never used. [unusedFunction]
        DoipLib::Message *DiagMessageHandler::GetMessage()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\obd_to_doip_converter.cpp:80:0: style: The function 'TryGetResponse' is never used. [unusedFunction]
        bool ObdToDoipConverter::TryGetResponse(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\application\doip\obd_to_doip_converter.cpp:87:0: style: The function 'TryGetResponseAsync' is never used. [unusedFunction]
        bool ObdToDoipConverter::TryGetResponseAsync(const std::vector<uint8_t> &pid)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\e2e\profile11.cpp:92:0: style: The function 'TryForward' is never used. [unusedFunction]
            bool Profile11::TryForward(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\helper\finite_state_machine.h:57:0: style: The function 'GetMachineState' is never used. [unusedFunction]
                MachineState<T> *GetMachineState() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\loadbalancing_option.cpp:15:0: style: The function 'Priority' is never used. [unusedFunction]
            uint16_t LoadBalancingOption::Priority() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\loadbalancing_option.cpp:20:0: style: The function 'Weight' is never used. [unusedFunction]
            uint16_t LoadBalancingOption::Weight() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\option\option.cpp:14:0: style: The function 'Discardable' is never used. [unusedFunction]
            bool Option::Discardable() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\someip_pubsub_client.cpp:43:0: style: The function 'Subscribe' is never used. [unusedFunction]
                void SomeIpPubSubClient::Subscribe(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\someip_pubsub_client.cpp:59:0: style: The function 'Unsubscribe' is never used. [unusedFunction]
                void SomeIpPubSubClient::Unsubscribe(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\pubsub\someip_pubsub_client.cpp:75:0: style: The function 'TryGetProcessedSubscription' is never used. [unusedFunction]
                bool SomeIpPubSubClient::TryGetProcessedSubscription(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\fsm\timer_set_state.h:70:0: style: The function 'Interrupt' is never used. [unusedFunction]
                        void Interrupt() noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.cpp:188:0: style: The function 'TryWaitUntiServiceOffered' is never used. [unusedFunction]
                bool SomeIpSdClient::TryWaitUntiServiceOffered(int duration)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\com\someip\sd\someip_sd_client.cpp:226:0: style: The function 'TryWaitUntiServiceOfferStopped' is never used. [unusedFunction]
                bool SomeIpSdClient::TryWaitUntiServiceOfferStopped(int duration)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\error_code.cpp:14:0: style: The function 'ThrowAsException' is never used. [unusedFunction]
        void ErrorCode::ThrowAsException() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\error_domain.h:50:0: style: The function 'Id' is never used. [unusedFunction]
            constexpr IdType Id() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\optional.h:106:0: style: The function 'Emplace' is never used. [unusedFunction]
            void Emplace(Args &&...args)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:146:0: style: The function 'EmplaceValue' is never used. [unusedFunction]
            void EmplaceValue(Args &&...args)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:255:0: style: The function 'Ok' is never used. [unusedFunction]
            Optional<T> Ok() const &
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:622:0: style: The function 'EmplaceError' is never used. [unusedFunction]
            void EmplaceError(Args &&...args)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:693:0: style: The function 'Err' is never used. [unusedFunction]
            Optional<E> Err() const &
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:717:0: style: The function 'ErrorOr' is never used. [unusedFunction]
            E ErrorOr(G &&defaultError) const &
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:736:0: style: The function 'CheckError' is never used. [unusedFunction]
            bool CheckError(G &&error) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:752:0: style: The function 'ValueOrThrow' is never used. [unusedFunction]
            void ValueOrThrow() const noexcept(false)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:761:0: style: The function 'Resolve' is never used. [unusedFunction]
            void Resolve(F &&f) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:774:0: style: The function 'Bind' is never used. [unusedFunction]
            auto Bind(F &&f) const -> Result<decltype(f()), E>
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:790:0: style: The function 'FromValue' is never used. [unusedFunction]
        Result<void, E> Result<void, E>::FromValue() noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\core\result.h:629:0: style: The function 'Swap' is never used. [unusedFunction]
            void Swap(Result &other) noexcept(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\cancellation_handler.cpp:16:0: style: The function 'SetIsCanceled' is never used. [unusedFunction]
        void CancellationHandler::SetIsCanceled(bool isCanceled)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:28:0: style: The function 'GetAllConversations' is never used. [unusedFunction]
        std::vector<std::reference_wrapper<Conversation>> Conversation::GetAllConversations()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:70:0: style: The function 'SetActivityNotifier' is never used. [unusedFunction]
        ara::core::Result<void> Conversation::SetActivityNotifier(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:79:0: style: The function 'GetConversationIdentifier' is never used. [unusedFunction]
        ara::core::Result<ConversationIdentifierType> Conversation::GetConversationIdentifier()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:85:0: style: The function 'GetDiagnosticSession' is never used. [unusedFunction]
        ara::core::Result<SessionControlType> Conversation::GetDiagnosticSession()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:103:0: style: The function 'SetDiagnosticSessionNotifier' is never used. [unusedFunction]
        ara::core::Result<void> Conversation::SetDiagnosticSessionNotifier(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:112:0: style: The function 'GetDiagnosticSessionShortName' is never used. [unusedFunction]
        ara::core::Result<std::string> Conversation::GetDiagnosticSessionShortName(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:140:0: style: The function 'GetDiagnosticSecurityLevel' is never used. [unusedFunction]
        ara::core::Result<SecurityLevelType> Conversation::GetDiagnosticSecurityLevel()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:146:0: style: The function 'SetSecurityLevelNotifier' is never used. [unusedFunction]
        ara::core::Result<void> Conversation::SetSecurityLevelNotifier(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:158:0: style: The function 'GetDiagnosticSecurityLevelShortName' is never used. [unusedFunction]
        ara::core::Result<std::string> Conversation::GetDiagnosticSecurityLevelShortName(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\conversation.cpp:177:0: style: The function 'ResetToDefaultSession' is never used. [unusedFunction]
        ara::core::Result<void> Conversation::ResetToDefaultSession()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\diag_error_domain.cpp:10:0: style: The function 'Name' is never used. [unusedFunction]
        const char *DiagErrorDomain::Name() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\download.cpp:17:0: style: The function 'RequestDownload' is never used. [unusedFunction]
        std::future<void> DownloadService::RequestDownload(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:13:0: style: The function 'GetCurrentStatus' is never used. [unusedFunction]
        core::Result<UdsDtcStatusByteType> DTCInformation::GetCurrentStatus(uint32_t dtc)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:33:0: style: The function 'SetCurrentStatus' is never used. [unusedFunction]
        void DTCInformation::SetCurrentStatus(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:80:0: style: The function 'SetDTCStatusChangedNotifier' is never used. [unusedFunction]
        core::Result<void> DTCInformation::SetDTCStatusChangedNotifier(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:90:0: style: The function 'GetNumberOfStoredEntries' is never used. [unusedFunction]
        core::Result<uint32_t> DTCInformation::GetNumberOfStoredEntries()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:98:0: style: The function 'SetNumberOfStoredEntriesNotifier' is never used. [unusedFunction]
        core::Result<void> DTCInformation::SetNumberOfStoredEntriesNotifier(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:108:0: style: The function 'Clear' is never used. [unusedFunction]
        core::Result<void> DTCInformation::Clear(uint32_t dtc)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:135:0: style: The function 'GetControlDTCStatus' is never used. [unusedFunction]
        core::Result<ControlDtcStatusType> DTCInformation::GetControlDTCStatus()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:141:0: style: The function 'SetControlDtcStatusNotifier' is never used. [unusedFunction]
        core::Result<void> DTCInformation::SetControlDtcStatusNotifier(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\dtc_information.cpp:151:0: style: The function 'EnableControlDtc' is never used. [unusedFunction]
        core::Result<void> DTCInformation::EnableControlDtc()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\ecu_reset_request.cpp:166:0: style: The function 'ExecuteReset' is never used. [unusedFunction]
        void EcuResetRequest::ExecuteReset(const MetaInfo &metaInfo)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:18:0: style: The function 'GetEventStatus' is never used. [unusedFunction]
        ara::core::Result<EventStatusByte> Event::GetEventStatus()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:83:0: style: The function 'GetLatchedWIRStatus' is never used. [unusedFunction]
        ara::core::Result<bool> Event::GetLatchedWIRStatus()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:89:0: style: The function 'SetLatchedWIRStatus' is never used. [unusedFunction]
        ara::core::Result<void> Event::SetLatchedWIRStatus(bool status)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:144:0: style: The function 'GetTestComplete' is never used. [unusedFunction]
        ara::core::Result<bool> Event::GetTestComplete()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\event.cpp:154:0: style: The function 'GetFaultDetectionCounter' is never used. [unusedFunction]
        ara::core::Result<int8_t> Event::GetFaultDetectionCounter()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.cpp:26:0: style: The function 'SetValue' is never used. [unusedFunction]
        void MetaInfo::SetValue(std::string key, std::string value)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\meta_info.cpp:32:0: style: The function 'GetContext' is never used. [unusedFunction]
        Context MetaInfo::GetContext() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\operation_cycle.cpp:19:0: style: The function 'RestartOperationCycle' is never used. [unusedFunction]
        ara::core::Result<void> OperationCycle::RestartOperationCycle()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\routing\uds_service_router.cpp:14:0: style: The function 'RemoveService' is never used. [unusedFunction]
            void UdsServiceRouter::RemoveService(uint8_t sid)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\diag\upload.cpp:17:0: style: The function 'RequestUpload' is never used. [unusedFunction]
        std::future<void> UploadService::RequestUpload(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:65:0: style: The function 'GetRandom' is never used. [unusedFunction]
        uint64_t DeterministicClient::GetRandom() noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:70:0: style: The function 'SetRandomSeed' is never used. [unusedFunction]
        void DeterministicClient::SetRandomSeed(uint64_t seed) noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:75:0: style: The function 'GetActivationTime' is never used. [unusedFunction]
        core::Result<DeterministicClient::TimeStamp> DeterministicClient::GetActivationTime() noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.cpp:81:0: style: The function 'GetNextActivationTime' is never used. [unusedFunction]
        core::Result<DeterministicClient::TimeStamp> DeterministicClient::GetNextActivationTime()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\deterministic_client.h:68:0: style: The function 'RunWorkerPool' is never used. [unusedFunction]
            ara::core::Result<void> RunWorkerPool(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\exec_exception.cpp:12:0: style: The function 'GetExecErrorDomain' is never used. [unusedFunction]
        const core::ErrorDomain &ExecException::GetExecErrorDomain() noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\execution_server.cpp:86:0: style: The function 'TryGetExecutionState' is never used. [unusedFunction]
        bool ExecutionServer::TryGetExecutionState(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_client.cpp:156:0: style: The function 'GetExecutionError' is never used. [unusedFunction]
        core::Result<ExecutionErrorEvent> StateClient::GetExecutionError(
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\exec\state_server.cpp:231:0: style: The function 'Initialized' is never used. [unusedFunction]
        bool StateServer::Initialized() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\log_stream.cpp:149:0: style: The function 'WithLocation' is never used. [unusedFunction]
        LogStream &LogStream::WithLocation(std::string file, int line)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:15:0: style: The function 'RemoteClientState' is never used. [unusedFunction]
        ClientState Logger::RemoteClientState() const noexcept
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:21:0: style: The function 'LogFatal' is never used. [unusedFunction]
        LogStream Logger::LogFatal() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:27:0: style: The function 'LogError' is never used. [unusedFunction]
        LogStream Logger::LogError() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:33:0: style: The function 'LogWarn' is never used. [unusedFunction]
        LogStream Logger::LogWarn() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:39:0: style: The function 'LogInfo' is never used. [unusedFunction]
        LogStream Logger::LogInfo() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:45:0: style: The function 'LogDebug' is never used. [unusedFunction]
        LogStream Logger::LogDebug() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\ara\log\logger.cpp:51:0: style: The function 'LogVerbose' is never used. [unusedFunction]
        LogStream Logger::LogVerbose() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5139:0: style: The function 'depth' is never used. [unusedFunction]
 PUGI__FN int xml_tree_walker::depth() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5226:0: style: The function 'as_int' is never used. [unusedFunction]
 PUGI__FN int xml_attribute::as_int(int def) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5240:0: style: The function 'as_double' is never used. [unusedFunction]
 PUGI__FN double xml_attribute::as_double(double def) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5254:0: style: The function 'as_bool' is never used. [unusedFunction]
 PUGI__FN bool xml_attribute::as_bool(bool def) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5262:0: style: The function 'as_llong' is never used. [unusedFunction]
 PUGI__FN long long xml_attribute::as_llong(long long def) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5269:0: style: The function 'as_ullong' is never used. [unusedFunction]
 PUGI__FN unsigned long long xml_attribute::as_ullong(unsigned long long def) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5296:0: style: The function 'hash_value' is never used. [unusedFunction]
 PUGI__FN size_t xml_attribute::hash_value() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5532:0: style: The function 'attributes' is never used. [unusedFunction]
 PUGI__FN xml_object_range<xml_attribute_iterator> xml_node::attributes() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5862:0: style: The function 'append_copy' is never used. [unusedFunction]
 PUGI__FN xml_attribute xml_node::append_copy(const xml_attribute& proto)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5879:0: style: The function 'prepend_copy' is never used. [unusedFunction]
 PUGI__FN xml_attribute xml_node::prepend_copy(const xml_attribute& proto)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5896:0: style: The function 'insert_copy_after' is never used. [unusedFunction]
 PUGI__FN xml_attribute xml_node::insert_copy_after(const xml_attribute& proto, const xml_attribute& attr)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:5914:0: style: The function 'insert_copy_before' is never used. [unusedFunction]
 PUGI__FN xml_attribute xml_node::insert_copy_before(const xml_attribute& proto, const xml_attribute& attr)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6108:0: style: The function 'append_move' is never used. [unusedFunction]
 PUGI__FN xml_node xml_node::append_move(const xml_node& moved)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6124:0: style: The function 'prepend_move' is never used. [unusedFunction]
 PUGI__FN xml_node xml_node::prepend_move(const xml_node& moved)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6140:0: style: The function 'insert_move_after' is never used. [unusedFunction]
 PUGI__FN xml_node xml_node::insert_move_after(const xml_node& moved, const xml_node& node)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6158:0: style: The function 'insert_move_before' is never used. [unusedFunction]
 PUGI__FN xml_node xml_node::insert_move_before(const xml_node& moved, const xml_node& node)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6195:0: style: The function 'remove_attributes' is never used. [unusedFunction]
 PUGI__FN bool xml_node::remove_attributes()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6234:0: style: The function 'remove_children' is never used. [unusedFunction]
 PUGI__FN bool xml_node::remove_children()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6255:0: style: The function 'append_buffer' is never used. [unusedFunction]
 PUGI__FN xml_parse_result xml_node::append_buffer(const void* contents, size_t size, unsigned int options, xml_encoding encoding)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6290:0: style: The function 'find_child_by_attribute' is never used. [unusedFunction]
 PUGI__FN xml_node xml_node::find_child_by_attribute(const char_t* name_, const char_t* attr_name, const char_t* attr_value) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6335:0: style: The function 'path' is never used. [unusedFunction]
 PUGI__FN string_t xml_node::path(char_t delimiter) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6413:0: style: The function 'traverse' is never used. [unusedFunction]
 PUGI__FN bool xml_node::traverse(xml_tree_walker& walker)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:6497:0: style: The function 'offset_debug' is never used. [unusedFunction]
 PUGI__FN ptrdiff_t xml_node::offset_debug() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7037:0: style: The function 'description' is never used. [unusedFunction]
 PUGI__FN const char* xml_parse_result::description() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7363:0: style: The function 'load_buffer_inplace' is never used. [unusedFunction]
 PUGI__FN xml_parse_result xml_document::load_buffer_inplace(void* contents, size_t size, unsigned int options, xml_encoding encoding)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7370:0: style: The function 'load_buffer_inplace_own' is never used. [unusedFunction]
 PUGI__FN xml_parse_result xml_document::load_buffer_inplace_own(void* contents, size_t size, unsigned int options, xml_encoding encoding)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7421:0: style: The function 'save_file' is never used. [unusedFunction]
 PUGI__FN bool xml_document::save_file(const char* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7437:0: style: The function 'document_element' is never used. [unusedFunction]
 PUGI__FN xml_node xml_document::document_element() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7449:0: style: The function 'as_utf8' is never used. [unusedFunction]
 PUGI__FN std::string PUGIXML_FUNCTION as_utf8(const wchar_t* str)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7461:0: style: The function 'as_wide' is never used. [unusedFunction]
 PUGI__FN std::basic_string<wchar_t> PUGIXML_FUNCTION as_wide(const char* str)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7474:0: style: The function 'set_memory_management_functions' is never used. [unusedFunction]
 PUGI__FN void PUGIXML_FUNCTION set_memory_management_functions(allocation_function allocate, deallocation_function deallocate)
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7480:0: style: The function 'get_memory_allocation_function' is never used. [unusedFunction]
 PUGI__FN allocation_function PUGIXML_FUNCTION get_memory_allocation_function()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:7485:0: style: The function 'get_memory_deallocation_function' is never used. [unusedFunction]
 PUGI__FN deallocation_function PUGIXML_FUNCTION get_memory_deallocation_function()
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12316:0: style: The function 'result' is never used. [unusedFunction]
 PUGI__FN const xpath_parse_result& xpath_exception::result() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12887:0: style: The function 'return_type' is never used. [unusedFunction]
 PUGI__FN xpath_value_type xpath_query::return_type() const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12894:0: style: The function 'evaluate_boolean' is never used. [unusedFunction]
 PUGI__FN bool xpath_query::evaluate_boolean(const xpath_node& n) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12915:0: style: The function 'evaluate_number' is never used. [unusedFunction]
 PUGI__FN double xpath_query::evaluate_number(const xpath_node& n) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:12937:0: style: The function 'evaluate_string' is never used. [unusedFunction]
 PUGI__FN string_t xpath_query::evaluate_string(const xpath_node& n) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:13052:0: style: The function 'select_node' is never used. [unusedFunction]
 PUGI__FN xpath_node xml_node::select_node(const char_t* query, xpath_variable_set* variables) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:13063:0: style: The function 'select_nodes' is never used. [unusedFunction]
 PUGI__FN xpath_node_set xml_node::select_nodes(const char_t* query, xpath_variable_set* variables) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.cpp:13074:0: style: The function 'select_single_node' is never used. [unusedFunction]
 PUGI__FN xpath_node xml_node::select_single_node(const char_t* query, xpath_variable_set* variables) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:627:0: style: The function 'find_child' is never used. [unusedFunction]
  template <typename Predicate> xml_node find_child(Predicate pred) const
^
F:\actions-runner\_work\FinalState\FinalState\Code\Adaptive-AUTOSAR\src\arxml\pugixml.hpp:639:0: style: The function 'find_node' is never used. [unusedFunction]
  template <typename Predicate> xml_node find_node(Predicate pred) const
^
nofile:0:0: information: Active checkers: There was critical errors (use --checkers-report=<filename> to see details) [checkersReport]

